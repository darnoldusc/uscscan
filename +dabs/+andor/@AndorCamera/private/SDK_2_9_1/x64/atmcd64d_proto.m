function [methodinfo,structs,enuminfo,ThunkLibName]=atmcd64d_proto
%ATMCD64D_PROTO Create structures to define interfaces found in 'ATMCD32D_MOD'.

%This function was generated by loadlibrary.m parser version 1.1.6.35 on Wed Feb  1 11:33:38 2012
%perl options:'ATMCD32D_MOD.i -outfile=atmcd64d_proto.m -thunkfile=atmcd64d_thunk_pcwin64.c -header=ATMCD32D_MOD.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'atmcd64d_thunk_pcwin64');
%  unsigned int __stdcall AbortAcquisition ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='AbortAcquisition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  unsigned int __stdcall CancelWait ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='CancelWait'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  unsigned int __stdcall CoolerOFF ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='CoolerOFF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  unsigned int __stdcall CoolerON ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='CoolerON'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  unsigned int __stdcall DemosaicImage ( WORD * grey , WORD * red , WORD * green , WORD * blue , ColorDemosaicInfo * info ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DemosaicImage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'COLORDEMOSAICINFOPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall EnableKeepCleans ( int iMode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='EnableKeepCleans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall FreeInternalMemory ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='FreeInternalMemory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  unsigned int __stdcall GetAcquiredData ( long * arr , unsigned long size ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='GetAcquiredData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr', 'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetAcquiredData16 ( WORD * arr , unsigned long size ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='GetAcquiredData16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetAcquiredFloatData ( float * arr , unsigned long size ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='GetAcquiredFloatData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'singlePtr', 'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetAcquisitionProgress ( long * acc , long * series ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetAcquisitionProgress'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr', 'longPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetAcquisitionTimings ( float * exposure , float * accumulate , float * kinetic ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetAcquisitionTimings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetAdjustedRingExposureTimes ( int inumTimes , float * fptimes ); 
fcns.thunkname{fcnNum}='uint32int32voidPtrThunk';fcns.name{fcnNum}='GetAdjustedRingExposureTimes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetAllDMAData ( long * arr , unsigned long size ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='GetAllDMAData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr', 'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetAmpDesc ( int index , char * name , int length ); 
fcns.thunkname{fcnNum}='uint32int32cstringint32Thunk';fcns.name{fcnNum}='GetAmpDesc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetAmpMaxSpeed ( int index , float * speed ); 
fcns.thunkname{fcnNum}='uint32int32voidPtrThunk';fcns.name{fcnNum}='GetAmpMaxSpeed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetAvailableCameras ( long * totalCameras ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetAvailableCameras'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetBackground ( long * arr , unsigned long size ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='GetBackground'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr', 'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetBaselineClamp ( int * state ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetBaselineClamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetBitDepth ( int channel , int * depth ); 
fcns.thunkname{fcnNum}='uint32int32voidPtrThunk';fcns.name{fcnNum}='GetBitDepth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetCameraEventStatus ( DWORD * camStatus ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetCameraEventStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetCameraHandle ( long cameraIndex , long * cameraHandle ); 
fcns.thunkname{fcnNum}='uint32longvoidPtrThunk';fcns.name{fcnNum}='GetCameraHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'long', 'longPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetCameraInformation ( int index , long * information ); 
fcns.thunkname{fcnNum}='uint32int32voidPtrThunk';fcns.name{fcnNum}='GetCameraInformation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'longPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetCameraSerialNumber ( int * number ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetCameraSerialNumber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetCapabilities ( AndorCapabilities * caps ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetCapabilities'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ANDORCAPSPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetControllerCardModel ( char * controllerCardModel ); 
fcns.thunkname{fcnNum}='uint32cstringThunk';fcns.name{fcnNum}='GetControllerCardModel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetCountConvertWavelengthRange ( float * minval , float * maxval ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetCountConvertWavelengthRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetCurrentCamera ( long * cameraHandle ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetCurrentCamera'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetCYMGShift ( int * iXshift , int * iYShift ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetCYMGShift'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGExternalOutputEnabled ( unsigned long uiIndex , unsigned long * puiEnabled ); 
fcns.thunkname{fcnNum}='uint32ulongvoidPtrThunk';fcns.name{fcnNum}='GetDDGExternalOutputEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGExternalOutputPolarity ( unsigned long uiIndex , unsigned long * puiPolarity ); 
fcns.thunkname{fcnNum}='uint32ulongvoidPtrThunk';fcns.name{fcnNum}='GetDDGExternalOutputPolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGExternalOutputStepEnabled ( unsigned long uiIndex , unsigned long * puiEnabled ); 
fcns.thunkname{fcnNum}='uint32ulongvoidPtrThunk';fcns.name{fcnNum}='GetDDGExternalOutputStepEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGExternalOutputTime ( unsigned long uiIndex , unsigned long long * puiDelay , unsigned long long * puiWidth ); 
fcns.thunkname{fcnNum}='uint32ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetDDGExternalOutputTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong', 'uint64Ptr', 'uint64Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGTTLGateWidth ( unsigned long long opticalWidth , unsigned long long * ttlWidth ); 
fcns.thunkname{fcnNum}='uint32uint64voidPtrThunk';fcns.name{fcnNum}='GetDDGTTLGateWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint64', 'uint64Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGGateTime ( unsigned long long * puiDelay , unsigned long long * puiWidth ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetDDGGateTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint64Ptr', 'uint64Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGInsertionDelay ( int * piState ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetDDGInsertionDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGIntelligate ( int * piState ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetDDGIntelligate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGIOC ( int * state ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetDDGIOC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGIOCFrequency ( double * frequency ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetDDGIOCFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGIOCNumber ( unsigned long * numberPulses ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetDDGIOCNumber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulongPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGIOCNumberRequested ( unsigned long * pulses ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetDDGIOCNumberRequested'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulongPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGIOCPeriod ( unsigned long long * period ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetDDGIOCPeriod'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint64Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGIOCPulses ( int * pulses ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetDDGIOCPulses'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGIOCTrigger ( unsigned long * trigger ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetDDGIOCTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulongPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGOpticalWidthEnabled ( unsigned long * puiEnabled ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetDDGOpticalWidthEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulongPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGLiteGlobalControlByte ( unsigned char * control ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetDDGLiteGlobalControlByte'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint8Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGLiteControlByte ( AT_DDGLiteChannelId channel , unsigned char * control ); 
fcns.thunkname{fcnNum}='uint32AT_DDGLiteChannelIdvoidPtrThunk';fcns.name{fcnNum}='GetDDGLiteControlByte'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'AT_DDGLiteChannelId', 'uint8Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGLiteInitialDelay ( AT_DDGLiteChannelId channel , float * fDelay ); 
fcns.thunkname{fcnNum}='uint32AT_DDGLiteChannelIdvoidPtrThunk';fcns.name{fcnNum}='GetDDGLiteInitialDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'AT_DDGLiteChannelId', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGLitePulseWidth ( AT_DDGLiteChannelId channel , float * fWidth ); 
fcns.thunkname{fcnNum}='uint32AT_DDGLiteChannelIdvoidPtrThunk';fcns.name{fcnNum}='GetDDGLitePulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'AT_DDGLiteChannelId', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGLiteInterPulseDelay ( AT_DDGLiteChannelId channel , float * fDelay ); 
fcns.thunkname{fcnNum}='uint32AT_DDGLiteChannelIdvoidPtrThunk';fcns.name{fcnNum}='GetDDGLiteInterPulseDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'AT_DDGLiteChannelId', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGLitePulsesPerExposure ( AT_DDGLiteChannelId channel , unsigned long * ui32Pulses ); 
fcns.thunkname{fcnNum}='uint32AT_DDGLiteChannelIdvoidPtrThunk';fcns.name{fcnNum}='GetDDGLitePulsesPerExposure'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'AT_DDGLiteChannelId', 'ulongPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGPulse ( double wid , double resolution , double * Delay , double * Width ); 
fcns.thunkname{fcnNum}='uint32doubledoublevoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetDDGPulse'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'double', 'double', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGStepCoefficients ( unsigned long mode , double * p1 , double * p2 ); 
fcns.thunkname{fcnNum}='uint32ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetDDGStepCoefficients'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDDGStepMode ( unsigned long * mode ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetDDGStepMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulongPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDetector ( int * xpixels , int * ypixels ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetDetector'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDICameraInfo ( void * info ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetDICameraInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetEMCCDGain ( int * gain ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetEMCCDGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetEMGainRange ( int * low , int * high ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetEMGainRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetExternalTriggerTermination ( unsigned long * puiTermination ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetExternalTriggerTermination'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulongPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetFastestRecommendedVSSpeed ( int * index , float * speed ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetFastestRecommendedVSSpeed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetFIFOUsage ( int * FIFOusage ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetFIFOUsage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetFilterMode ( int * mode ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetFilterMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetFKExposureTime ( float * time ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetFKExposureTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetFKVShiftSpeed ( int index , int * speed ); 
fcns.thunkname{fcnNum}='uint32int32voidPtrThunk';fcns.name{fcnNum}='GetFKVShiftSpeed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetFKVShiftSpeedF ( int index , float * speed ); 
fcns.thunkname{fcnNum}='uint32int32voidPtrThunk';fcns.name{fcnNum}='GetFKVShiftSpeedF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetFrontEndStatus ( int * piFlag ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetFrontEndStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetGateMode ( int * piGatemode ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetGateMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetHardwareVersion ( unsigned int * PCB , unsigned int * Decode , unsigned int * dummy1 , unsigned int * dummy2 , unsigned int * CameraFirmwareVersion , unsigned int * CameraFirmwareBuild ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetHardwareVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetHeadModel ( char * name ); 
fcns.thunkname{fcnNum}='uint32cstringThunk';fcns.name{fcnNum}='GetHeadModel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetHorizontalSpeed ( int index , int * speed ); 
fcns.thunkname{fcnNum}='uint32int32voidPtrThunk';fcns.name{fcnNum}='GetHorizontalSpeed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetHSSpeed ( int channel , int typ , int index , float * speed ); 
fcns.thunkname{fcnNum}='uint32int32int32int32voidPtrThunk';fcns.name{fcnNum}='GetHSSpeed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetHVflag ( int * bFlag ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetHVflag'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetID ( int devNum , int * id ); 
fcns.thunkname{fcnNum}='uint32int32voidPtrThunk';fcns.name{fcnNum}='GetID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetImageFlip ( int * iHFlip , int * iVFlip ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetImageFlip'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetImageRotate ( int * iRotate ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetImageRotate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetImages ( long first , long last , long * arr , unsigned long size , long * validfirst , long * validlast ); 
fcns.thunkname{fcnNum}='uint32longlongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetImages'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'long', 'long', 'longPtr', 'ulong', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetImages16 ( long first , long last , WORD * arr , unsigned long size , long * validfirst , long * validlast ); 
fcns.thunkname{fcnNum}='uint32longlongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetImages16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'long', 'long', 'uint16Ptr', 'ulong', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetImagesPerDMA ( unsigned long * images ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetImagesPerDMA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulongPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetIRQ ( int * IRQ ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetIRQ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetKeepCleanTime ( float * KeepCleanTime ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetKeepCleanTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetMaximumBinning ( int ReadMode , int HorzVert , int * MaxBinning ); 
fcns.thunkname{fcnNum}='uint32int32int32voidPtrThunk';fcns.name{fcnNum}='GetMaximumBinning'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetMaximumExposure ( float * MaxExp ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetMaximumExposure'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetMCPGain ( int * piGain ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetMCPGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetMCPGainRange ( int * iLow , int * iHigh ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetMCPGainRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetMCPGainTable ( int iNum , int * piGain , float * pfPhotoepc ); 
fcns.thunkname{fcnNum}='uint32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetMCPGainTable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetMCPVoltage ( int * iVoltage ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetMCPVoltage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetMinimumImageLength ( int * MinImageLength ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetMinimumImageLength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetMinimumNumberInSeries ( int * number ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetMinimumNumberInSeries'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetMostRecentColorImage16 ( unsigned long size , int algorithm , WORD * red , WORD * green , WORD * blue ); 
fcns.thunkname{fcnNum}='uint32ulongint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetMostRecentColorImage16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong', 'int32', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetMostRecentImage ( long * arr , unsigned long size ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='GetMostRecentImage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr', 'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetMostRecentImage16 ( WORD * arr , unsigned long size ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='GetMostRecentImage16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetMSTimingsData ( SYSTEMTIME * TimeOfStart , float * pfDifferences , int inoOfImages ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='GetMSTimingsData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'s_SYSTEMTIMEPtr', 'singlePtr', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetMetaDataInfo ( SYSTEMTIME * TimeOfStart , float * pfTimeFromStart , unsigned int index ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='GetMetaDataInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'s_SYSTEMTIMEPtr', 'singlePtr', 'uint32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetMSTimingsEnabled ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='GetMSTimingsEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNewData ( long * arr , unsigned long size ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='GetNewData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr', 'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNewData16 ( WORD * arr , unsigned long size ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='GetNewData16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNewData8 ( unsigned char * arr , unsigned long size ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='GetNewData8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint8Ptr', 'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNewFloatData ( float * arr , unsigned long size ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='GetNewFloatData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'singlePtr', 'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNumberADChannels ( int * channels ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetNumberADChannels'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNumberAmp ( int * amp ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetNumberAmp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNumberAvailableImages ( long * first , long * last ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetNumberAvailableImages'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr', 'longPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNumberDDGExternalOutputs ( unsigned long * puiCount ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetNumberDDGExternalOutputs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulongPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNumberDevices ( int * numDevs ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetNumberDevices'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNumberFKVShiftSpeeds ( int * number ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetNumberFKVShiftSpeeds'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNumberHorizontalSpeeds ( int * number ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetNumberHorizontalSpeeds'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNumberHSSpeeds ( int channel , int typ , int * speeds ); 
fcns.thunkname{fcnNum}='uint32int32int32voidPtrThunk';fcns.name{fcnNum}='GetNumberHSSpeeds'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNumberNewImages ( long * first , long * last ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetNumberNewImages'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr', 'longPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNumberPhotonCountingDivisions ( unsigned long * noOfDivisions ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetNumberPhotonCountingDivisions'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulongPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNumberPreAmpGains ( int * noGains ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetNumberPreAmpGains'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNumberRingExposureTimes ( int * ipnumTimes ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetNumberRingExposureTimes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNumberIO ( int * iNumber ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetNumberIO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNumberVerticalSpeeds ( int * number ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetNumberVerticalSpeeds'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNumberVSAmplitudes ( int * number ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetNumberVSAmplitudes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetNumberVSSpeeds ( int * speeds ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetNumberVSSpeeds'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetOldestImage ( long * arr , unsigned long size ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='GetOldestImage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr', 'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetOldestImage16 ( WORD * arr , unsigned long size ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='GetOldestImage16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr', 'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetPhosphorStatus ( int * piFlag ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetPhosphorStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetPhysicalDMAAddress ( unsigned long * Address1 , unsigned long * Address2 ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetPhysicalDMAAddress'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetPixelSize ( float * xSize , float * ySize ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetPixelSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetPreAmpGain ( int index , float * gain ); 
fcns.thunkname{fcnNum}='uint32int32voidPtrThunk';fcns.name{fcnNum}='GetPreAmpGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetPreAmpGainText ( int index , char * name , int length ); 
fcns.thunkname{fcnNum}='uint32int32cstringint32Thunk';fcns.name{fcnNum}='GetPreAmpGainText'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetDualExposureTimes ( float * exposure1 , float * exposure2 ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetDualExposureTimes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetQE ( char * sensor , float wavelength , unsigned int mode , float * QE ); 
fcns.thunkname{fcnNum}='uint32cstringfloatuint32voidPtrThunk';fcns.name{fcnNum}='GetQE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'single', 'uint32', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetReadOutTime ( float * ReadOutTime ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetReadOutTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetRegisterDump ( int * mode ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetRegisterDump'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetRingExposureRange ( float * fpMin , float * fpMax ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetRingExposureRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetSDK3Handle ( int * Handle ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetSDK3Handle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetSensitivity ( int channel , int horzShift , int amplifier , int pa , float * sensitivity ); 
fcns.thunkname{fcnNum}='uint32int32int32int32int32voidPtrThunk';fcns.name{fcnNum}='GetSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetSizeOfCircularBuffer ( long * index ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetSizeOfCircularBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetSlotBusDeviceFunction ( DWORD * dwslot , DWORD * dwBus , DWORD * dwDevice , DWORD * dwFunction ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetSlotBusDeviceFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetSoftwareVersion ( unsigned int * eprom , unsigned int * coffile , unsigned int * vxdrev , unsigned int * vxdver , unsigned int * dllrev , unsigned int * dllver ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetSoftwareVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetSpoolProgress ( long * index ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetSpoolProgress'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetStartUpTime ( float * time ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetStartUpTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetStatus ( int * status ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetTECStatus ( int * piFlag ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetTECStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetTemperature ( int * temperature ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetTemperature'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetTemperatureF ( float * temperature ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetTemperatureF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetTemperatureRange ( int * mintemp , int * maxtemp ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetTemperatureRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetTemperatureStatus ( float * SensorTemp , float * TargetTemp , float * AmbientTemp , float * CoolerVolts ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetTemperatureStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetTotalNumberImagesAcquired ( long * index ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='GetTotalNumberImagesAcquired'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetIODirection ( int index , int * iDirection ); 
fcns.thunkname{fcnNum}='uint32int32voidPtrThunk';fcns.name{fcnNum}='GetIODirection'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetIOLevel ( int index , int * iLevel ); 
fcns.thunkname{fcnNum}='uint32int32voidPtrThunk';fcns.name{fcnNum}='GetIOLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetVersionInfo ( AT_VersionInfoId arr , char * szVersionInfo , unsigned long ui32BufferLen ); 
fcns.thunkname{fcnNum}='uint32AT_VersionInfoIdcstringulongThunk';fcns.name{fcnNum}='GetVersionInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'AT_VersionInfoId', 'cstring', 'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetVerticalSpeed ( int index , int * speed ); 
fcns.thunkname{fcnNum}='uint32int32voidPtrThunk';fcns.name{fcnNum}='GetVerticalSpeed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetVirtualDMAAddress ( void ** Address1 , void ** Address2 ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetVirtualDMAAddress'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtrPtr', 'voidPtrPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetVSAmplitudeString ( int index , char * text ); 
fcns.thunkname{fcnNum}='uint32int32cstringThunk';fcns.name{fcnNum}='GetVSAmplitudeString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetVSAmplitudeFromString ( char * text , int * index ); 
fcns.thunkname{fcnNum}='uint32cstringvoidPtrThunk';fcns.name{fcnNum}='GetVSAmplitudeFromString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetVSAmplitudeValue ( int index , int * value ); 
fcns.thunkname{fcnNum}='uint32int32voidPtrThunk';fcns.name{fcnNum}='GetVSAmplitudeValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetVSSpeed ( int index , float * speed ); 
fcns.thunkname{fcnNum}='uint32int32voidPtrThunk';fcns.name{fcnNum}='GetVSSpeed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GPIBReceive ( int id , short address , char * text , int size ); 
fcns.thunkname{fcnNum}='uint32int32int16cstringint32Thunk';fcns.name{fcnNum}='GPIBReceive'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int16', 'cstring', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GPIBSend ( int id , short address , char * text ); 
fcns.thunkname{fcnNum}='uint32int32int16cstringThunk';fcns.name{fcnNum}='GPIBSend'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int16', 'cstring'};fcnNum=fcnNum+1;
%  unsigned int __stdcall I2CBurstRead ( BYTE i2cAddress , long nBytes , BYTE * data ); 
fcns.thunkname{fcnNum}='uint32uint8longvoidPtrThunk';fcns.name{fcnNum}='I2CBurstRead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint8', 'long', 'uint8Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall I2CBurstWrite ( BYTE i2cAddress , long nBytes , BYTE * data ); 
fcns.thunkname{fcnNum}='uint32uint8longvoidPtrThunk';fcns.name{fcnNum}='I2CBurstWrite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint8', 'long', 'uint8Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall I2CRead ( BYTE deviceID , BYTE intAddress , BYTE * pdata ); 
fcns.thunkname{fcnNum}='uint32uint8uint8voidPtrThunk';fcns.name{fcnNum}='I2CRead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint8', 'uint8', 'uint8Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall I2CReset ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='I2CReset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  unsigned int __stdcall I2CWrite ( BYTE deviceID , BYTE intAddress , BYTE data ); 
fcns.thunkname{fcnNum}='uint32uint8uint8uint8Thunk';fcns.name{fcnNum}='I2CWrite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint8', 'uint8', 'uint8'};fcnNum=fcnNum+1;
%  unsigned int __stdcall IdAndorDll ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='IdAndorDll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  unsigned int __stdcall InAuxPort ( int port , int * state ); 
fcns.thunkname{fcnNum}='uint32int32voidPtrThunk';fcns.name{fcnNum}='InAuxPort'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall Initialize ( char * dir ); 
fcns.thunkname{fcnNum}='uint32cstringThunk';fcns.name{fcnNum}='Initialize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  unsigned int __stdcall InitializeDevice ( char * dir ); 
fcns.thunkname{fcnNum}='uint32cstringThunk';fcns.name{fcnNum}='InitializeDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  unsigned int __stdcall IsAmplifierAvailable ( int iamp ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='IsAmplifierAvailable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall IsCoolerOn ( int * iCoolerStatus ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='IsCoolerOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall IsCountConvertModeAvailable ( int mode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='IsCountConvertModeAvailable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall IsInternalMechanicalShutter ( int * InternalShutter ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='IsInternalMechanicalShutter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall IsPreAmpGainAvailable ( int channel , int amplifier , int index , int pa , int * status ); 
fcns.thunkname{fcnNum}='uint32int32int32int32int32voidPtrThunk';fcns.name{fcnNum}='IsPreAmpGainAvailable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall IsTriggerModeAvailable ( int iTriggerMode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='IsTriggerModeAvailable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall Merge ( const long * arr , long nOrder , long nPoint , long nPixel , float * coeff , long fit , long hbin , long * output , float * start , float * step_Renamed ); 
fcns.thunkname{fcnNum}='uint32voidPtrlonglonglongvoidPtrlonglongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='Merge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr', 'long', 'long', 'long', 'singlePtr', 'long', 'long', 'longPtr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall OutAuxPort ( int port , int state ); 
fcns.thunkname{fcnNum}='uint32int32int32Thunk';fcns.name{fcnNum}='OutAuxPort'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall PrepareAcquisition ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='PrepareAcquisition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  unsigned int __stdcall SaveAsBmp ( char * path , char * palette , long ymin , long ymax ); 
fcns.thunkname{fcnNum}='uint32cstringcstringlonglongThunk';fcns.name{fcnNum}='SaveAsBmp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'long', 'long'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SaveAsCommentedSif ( char * path , char * comment ); 
fcns.thunkname{fcnNum}='uint32cstringcstringThunk';fcns.name{fcnNum}='SaveAsCommentedSif'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SaveAsEDF ( char * szPath , int iMode ); 
fcns.thunkname{fcnNum}='uint32cstringint32Thunk';fcns.name{fcnNum}='SaveAsEDF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SaveAsFITS ( char * szFileTitle , int typ ); 
fcns.thunkname{fcnNum}='uint32cstringint32Thunk';fcns.name{fcnNum}='SaveAsFITS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SaveAsRaw ( char * szFileTitle , int typ ); 
fcns.thunkname{fcnNum}='uint32cstringint32Thunk';fcns.name{fcnNum}='SaveAsRaw'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SaveAsSif ( char * path ); 
fcns.thunkname{fcnNum}='uint32cstringThunk';fcns.name{fcnNum}='SaveAsSif'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SaveAsSPC ( char * path ); 
fcns.thunkname{fcnNum}='uint32cstringThunk';fcns.name{fcnNum}='SaveAsSPC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SaveAsTiff ( char * path , char * palette , int position , int typ ); 
fcns.thunkname{fcnNum}='uint32cstringcstringint32int32Thunk';fcns.name{fcnNum}='SaveAsTiff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SaveAsTiffEx ( char * path , char * palette , int position , int typ , int mode ); 
fcns.thunkname{fcnNum}='uint32cstringcstringint32int32int32Thunk';fcns.name{fcnNum}='SaveAsTiffEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SaveEEPROMToFile ( char * cFileName ); 
fcns.thunkname{fcnNum}='uint32cstringThunk';fcns.name{fcnNum}='SaveEEPROMToFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SaveToClipBoard ( char * palette ); 
fcns.thunkname{fcnNum}='uint32cstringThunk';fcns.name{fcnNum}='SaveToClipBoard'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SelectDevice ( int devNum ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SelectDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SendSoftwareTrigger ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='SendSoftwareTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  unsigned int __stdcall SetAccumulationCycleTime ( float time ); 
fcns.thunkname{fcnNum}='uint32floatThunk';fcns.name{fcnNum}='SetAccumulationCycleTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'single'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetAcqStatusEvent ( HANDLE statusEvent ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='SetAcqStatusEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetAcquisitionMode ( int mode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetAcquisitionMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetAcquisitionType ( int typ ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetAcquisitionType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetADChannel ( int channel ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetADChannel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetAdvancedTriggerModeState ( int iState ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetAdvancedTriggerModeState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetBackground ( long * arr , unsigned long size ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='SetBackground'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr', 'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetBaselineClamp ( int state ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetBaselineClamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetBaselineOffset ( int offset ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetBaselineOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetCameraStatusEnable ( DWORD Enable ); 
fcns.thunkname{fcnNum}='uint32ulongThunk';fcns.name{fcnNum}='SetCameraStatusEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetChargeShifting ( unsigned int NumberRows , unsigned int NumberRepeats ); 
fcns.thunkname{fcnNum}='uint32uint32uint32Thunk';fcns.name{fcnNum}='SetChargeShifting'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetComplexImage ( int numAreas , int * areas ); 
fcns.thunkname{fcnNum}='uint32int32voidPtrThunk';fcns.name{fcnNum}='SetComplexImage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetCoolerMode ( int mode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetCoolerMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetCountConvertMode ( int Mode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetCountConvertMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetCountConvertWavelength ( float wavelength ); 
fcns.thunkname{fcnNum}='uint32floatThunk';fcns.name{fcnNum}='SetCountConvertWavelength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'single'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetCropMode ( int active , int cropHeight , int reserved ); 
fcns.thunkname{fcnNum}='uint32int32int32int32Thunk';fcns.name{fcnNum}='SetCropMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetCurrentCamera ( long cameraHandle ); 
fcns.thunkname{fcnNum}='uint32longThunk';fcns.name{fcnNum}='SetCurrentCamera'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetCustomTrackHBin ( int bin ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetCustomTrackHBin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDataType ( int typ ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetDataType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDACOutput ( int iOption , int iResolution , int iValue ); 
fcns.thunkname{fcnNum}='uint32int32int32int32Thunk';fcns.name{fcnNum}='SetDACOutput'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDACOutputScale ( int iScale ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetDACOutputScale'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGAddress ( BYTE t0 , BYTE t1 , BYTE t2 , BYTE t3 , BYTE address ); 
fcns.thunkname{fcnNum}='uint32uint8uint8uint8uint8uint8Thunk';fcns.name{fcnNum}='SetDDGAddress'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint8', 'uint8', 'uint8', 'uint8', 'uint8'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGExternalOutputEnabled ( unsigned long uiIndex , unsigned long uiEnabled ); 
fcns.thunkname{fcnNum}='uint32ulongulongThunk';fcns.name{fcnNum}='SetDDGExternalOutputEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGExternalOutputPolarity ( unsigned long uiIndex , unsigned long uiPolarity ); 
fcns.thunkname{fcnNum}='uint32ulongulongThunk';fcns.name{fcnNum}='SetDDGExternalOutputPolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGExternalOutputStepEnabled ( unsigned long uiIndex , unsigned long uiEnabled ); 
fcns.thunkname{fcnNum}='uint32ulongulongThunk';fcns.name{fcnNum}='SetDDGExternalOutputStepEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGExternalOutputTime ( unsigned long uiIndex , unsigned long long uiDelay , unsigned long long uiWidth ); 
fcns.thunkname{fcnNum}='uint32ulonguint64uint64Thunk';fcns.name{fcnNum}='SetDDGExternalOutputTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong', 'uint64', 'uint64'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGGain ( int gain ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetDDGGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGGateStep ( double step_Renamed ); 
fcns.thunkname{fcnNum}='uint32doubleThunk';fcns.name{fcnNum}='SetDDGGateStep'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGGateTime ( unsigned long long uiDelay , unsigned long long uiWidth ); 
fcns.thunkname{fcnNum}='uint32uint64uint64Thunk';fcns.name{fcnNum}='SetDDGGateTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint64', 'uint64'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGInsertionDelay ( int state ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetDDGInsertionDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGIntelligate ( int state ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetDDGIntelligate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGIOC ( int state ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetDDGIOC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGIOCFrequency ( double frequency ); 
fcns.thunkname{fcnNum}='uint32doubleThunk';fcns.name{fcnNum}='SetDDGIOCFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGIOCNumber ( unsigned long numberPulses ); 
fcns.thunkname{fcnNum}='uint32ulongThunk';fcns.name{fcnNum}='SetDDGIOCNumber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGIOCPeriod ( unsigned long long period ); 
fcns.thunkname{fcnNum}='uint32uint64Thunk';fcns.name{fcnNum}='SetDDGIOCPeriod'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGIOCTrigger ( unsigned long trigger ); 
fcns.thunkname{fcnNum}='uint32ulongThunk';fcns.name{fcnNum}='SetDDGIOCTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGOpticalWidthEnabled ( unsigned long uiEnabled ); 
fcns.thunkname{fcnNum}='uint32ulongThunk';fcns.name{fcnNum}='SetDDGOpticalWidthEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGLiteGlobalControlByte ( unsigned char control ); 
fcns.thunkname{fcnNum}='uint32uint8Thunk';fcns.name{fcnNum}='SetDDGLiteGlobalControlByte'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGLiteControlByte ( AT_DDGLiteChannelId channel , unsigned char control ); 
fcns.thunkname{fcnNum}='uint32AT_DDGLiteChannelIduint8Thunk';fcns.name{fcnNum}='SetDDGLiteControlByte'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'AT_DDGLiteChannelId', 'uint8'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGLiteInitialDelay ( AT_DDGLiteChannelId channel , float fDelay ); 
fcns.thunkname{fcnNum}='uint32AT_DDGLiteChannelIdfloatThunk';fcns.name{fcnNum}='SetDDGLiteInitialDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'AT_DDGLiteChannelId', 'single'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGLitePulseWidth ( AT_DDGLiteChannelId channel , float fWidth ); 
fcns.thunkname{fcnNum}='uint32AT_DDGLiteChannelIdfloatThunk';fcns.name{fcnNum}='SetDDGLitePulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'AT_DDGLiteChannelId', 'single'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGLiteInterPulseDelay ( AT_DDGLiteChannelId channel , float fDelay ); 
fcns.thunkname{fcnNum}='uint32AT_DDGLiteChannelIdfloatThunk';fcns.name{fcnNum}='SetDDGLiteInterPulseDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'AT_DDGLiteChannelId', 'single'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGLitePulsesPerExposure ( AT_DDGLiteChannelId channel , unsigned long ui32Pulses ); 
fcns.thunkname{fcnNum}='uint32AT_DDGLiteChannelIdulongThunk';fcns.name{fcnNum}='SetDDGLitePulsesPerExposure'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'AT_DDGLiteChannelId', 'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGStepCoefficients ( unsigned long mode , double p1 , double p2 ); 
fcns.thunkname{fcnNum}='uint32ulongdoubledoubleThunk';fcns.name{fcnNum}='SetDDGStepCoefficients'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGStepMode ( unsigned long mode ); 
fcns.thunkname{fcnNum}='uint32ulongThunk';fcns.name{fcnNum}='SetDDGStepMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGTimes ( double t0 , double t1 , double t2 ); 
fcns.thunkname{fcnNum}='uint32doubledoubledoubleThunk';fcns.name{fcnNum}='SetDDGTimes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'double', 'double', 'double'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGTriggerMode ( int mode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetDDGTriggerMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDDGVariableGateStep ( int mode , double p1 , double p2 ); 
fcns.thunkname{fcnNum}='uint32int32doubledoubleThunk';fcns.name{fcnNum}='SetDDGVariableGateStep'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'double', 'double'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDelayGenerator ( int board , short address , int typ ); 
fcns.thunkname{fcnNum}='uint32int32int16int32Thunk';fcns.name{fcnNum}='SetDelayGenerator'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int16', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDMAParameters ( int MaxImagesPerDMA , float SecondsPerDMA ); 
fcns.thunkname{fcnNum}='uint32int32floatThunk';fcns.name{fcnNum}='SetDMAParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'single'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDriverEvent ( HANDLE driverEvent ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='SetDriverEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetEMAdvanced ( int state ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetEMAdvanced'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetEMCCDGain ( int gain ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetEMCCDGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetEMClockCompensation ( int EMClockCompensationFlag ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetEMClockCompensation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetEMGainMode ( int mode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetEMGainMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetExposureTime ( float time ); 
fcns.thunkname{fcnNum}='uint32floatThunk';fcns.name{fcnNum}='SetExposureTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'single'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetExternalTriggerTermination ( unsigned long uiTermination ); 
fcns.thunkname{fcnNum}='uint32ulongThunk';fcns.name{fcnNum}='SetExternalTriggerTermination'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetFanMode ( int mode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetFanMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetFastExtTrigger ( int mode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetFastExtTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetFastKinetics ( int exposedRows , int seriesLength , float time , int mode , int hbin , int vbin ); 
fcns.thunkname{fcnNum}='uint32int32int32floatint32int32int32Thunk';fcns.name{fcnNum}='SetFastKinetics'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32', 'single', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetFastKineticsEx ( int exposedRows , int seriesLength , float time , int mode , int hbin , int vbin , int offset ); 
fcns.thunkname{fcnNum}='uint32int32int32floatint32int32int32int32Thunk';fcns.name{fcnNum}='SetFastKineticsEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32', 'single', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetFilterMode ( int mode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetFilterMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetFilterParameters ( int width , float sensitivity , int range , float accept , int smooth , int noise ); 
fcns.thunkname{fcnNum}='uint32int32floatint32floatint32int32Thunk';fcns.name{fcnNum}='SetFilterParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'single', 'int32', 'single', 'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetFKVShiftSpeed ( int index ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetFKVShiftSpeed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetFPDP ( int state ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetFPDP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetFrameTransferMode ( int mode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetFrameTransferMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetFrontEndEvent ( HANDLE driverEvent ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='SetFrontEndEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetFullImage ( int hbin , int vbin ); 
fcns.thunkname{fcnNum}='uint32int32int32Thunk';fcns.name{fcnNum}='SetFullImage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetFVBHBin ( int bin ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetFVBHBin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetGain ( int gain ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetGate ( float delay , float width , float stepRenamed ); 
fcns.thunkname{fcnNum}='uint32floatfloatfloatThunk';fcns.name{fcnNum}='SetGate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'single', 'single', 'single'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetGateMode ( int gatemode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetGateMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetHighCapacity ( int state ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetHighCapacity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetHorizontalSpeed ( int index ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetHorizontalSpeed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetHSSpeed ( int typ , int index ); 
fcns.thunkname{fcnNum}='uint32int32int32Thunk';fcns.name{fcnNum}='SetHSSpeed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetImage ( int hbin , int vbin , int hstart , int hend , int vstart , int vend ); 
fcns.thunkname{fcnNum}='uint32int32int32int32int32int32int32Thunk';fcns.name{fcnNum}='SetImage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetImageFlip ( int iHFlip , int iVFlip ); 
fcns.thunkname{fcnNum}='uint32int32int32Thunk';fcns.name{fcnNum}='SetImageFlip'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetImageRotate ( int iRotate ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetImageRotate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetIsolatedCropMode ( int active , int cropheight , int cropwidth , int vbin , int hbin ); 
fcns.thunkname{fcnNum}='uint32int32int32int32int32int32Thunk';fcns.name{fcnNum}='SetIsolatedCropMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetKineticCycleTime ( float time ); 
fcns.thunkname{fcnNum}='uint32floatThunk';fcns.name{fcnNum}='SetKineticCycleTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'single'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetMCPGain ( int gain ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetMCPGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetMCPGating ( int gating ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetMCPGating'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetMessageWindow ( HWND wnd ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='SetMessageWindow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'HWND__Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetMetaData ( int state ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetMetaData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetMultiTrack ( int number , int height , int offset , int * bottom , int * gap ); 
fcns.thunkname{fcnNum}='uint32int32int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='SetMultiTrack'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetMultiTrackHBin ( int bin ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetMultiTrackHBin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetMultiTrackHRange ( int iStart , int iEnd ); 
fcns.thunkname{fcnNum}='uint32int32int32Thunk';fcns.name{fcnNum}='SetMultiTrackHRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetMultiTrackScan ( int trackHeight , int numberTracks , int iSIHStart , int iSIHEnd , int trackHBinning , int trackVBinning , int trackGap , int trackOffset , int trackSkip , int numberSubFrames ); 
fcns.thunkname{fcnNum}='uint32int32int32int32int32int32int32int32int32int32int32Thunk';fcns.name{fcnNum}='SetMultiTrackScan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetNextAddress ( long * data , long lowAdd , long highAdd , long length , long physical ); 
fcns.thunkname{fcnNum}='uint32voidPtrlonglonglonglongThunk';fcns.name{fcnNum}='SetNextAddress'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr', 'long', 'long', 'long', 'long'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetNextAddress16 ( long * data , long lowAdd , long highAdd , long length , long physical ); 
fcns.thunkname{fcnNum}='uint32voidPtrlonglonglonglongThunk';fcns.name{fcnNum}='SetNextAddress16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr', 'long', 'long', 'long', 'long'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetNumberAccumulations ( int number ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetNumberAccumulations'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetNumberKinetics ( int number ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetNumberKinetics'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetNumberPrescans ( int iNumber ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetNumberPrescans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetOutputAmplifier ( int typ ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetOutputAmplifier'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetOverlapMode ( int mode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetOverlapMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetPCIMode ( int mode , int value ); 
fcns.thunkname{fcnNum}='uint32int32int32Thunk';fcns.name{fcnNum}='SetPCIMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetPhotonCounting ( int state ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetPhotonCounting'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetPhotonCountingThreshold ( long min , long max ); 
fcns.thunkname{fcnNum}='uint32longlongThunk';fcns.name{fcnNum}='SetPhotonCountingThreshold'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetPhosphorEvent ( HANDLE driverEvent ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='SetPhosphorEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetPhotonCountingDivisions ( unsigned long noOfDivisions , long * divisions ); 
fcns.thunkname{fcnNum}='uint32ulongvoidPtrThunk';fcns.name{fcnNum}='SetPhotonCountingDivisions'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetPixelMode ( int bitdepth , int colormode ); 
fcns.thunkname{fcnNum}='uint32int32int32Thunk';fcns.name{fcnNum}='SetPixelMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetPreAmpGain ( int index ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetPreAmpGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDualExposureTimes ( float expTime1 , float expTime2 ); 
fcns.thunkname{fcnNum}='uint32floatfloatThunk';fcns.name{fcnNum}='SetDualExposureTimes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'single', 'single'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetDualExposureMode ( int mode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetDualExposureMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetRandomTracks ( int numTracks , int * areas ); 
fcns.thunkname{fcnNum}='uint32int32voidPtrThunk';fcns.name{fcnNum}='SetRandomTracks'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetReadMode ( int mode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetReadMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetRegisterDump ( int mode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetRegisterDump'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetRingExposureTimes ( int numTimes , float * times ); 
fcns.thunkname{fcnNum}='uint32int32voidPtrThunk';fcns.name{fcnNum}='SetRingExposureTimes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetSaturationEvent ( HANDLE saturationEvent ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='SetSaturationEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetShutter ( int typ , int mode , int closingtime , int openingtime ); 
fcns.thunkname{fcnNum}='uint32int32int32int32int32Thunk';fcns.name{fcnNum}='SetShutter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetShutterEx ( int typ , int mode , int closingtime , int openingtime , int extmode ); 
fcns.thunkname{fcnNum}='uint32int32int32int32int32int32Thunk';fcns.name{fcnNum}='SetShutterEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetShutters ( int typ , int mode , int closingtime , int openingtime , int exttype , int extmode , int dummy1 , int dummy2 ); 
fcns.thunkname{fcnNum}='uint32int32int32int32int32int32int32int32int32Thunk';fcns.name{fcnNum}='SetShutters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetSifComment ( char * comment ); 
fcns.thunkname{fcnNum}='uint32cstringThunk';fcns.name{fcnNum}='SetSifComment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetSingleTrack ( int centre , int height ); 
fcns.thunkname{fcnNum}='uint32int32int32Thunk';fcns.name{fcnNum}='SetSingleTrack'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetSingleTrackHBin ( int bin ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetSingleTrackHBin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetSpool ( int active , int method , char * path , int framebuffersize ); 
fcns.thunkname{fcnNum}='uint32int32int32cstringint32Thunk';fcns.name{fcnNum}='SetSpool'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetSpoolThreadCount ( int count ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetSpoolThreadCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetStorageMode ( long mode ); 
fcns.thunkname{fcnNum}='uint32longThunk';fcns.name{fcnNum}='SetStorageMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetTECEvent ( HANDLE driverEvent ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='SetTECEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetTemperature ( int temperature ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetTemperature'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetTemperatureEvent ( HANDLE temperatureEvent ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='SetTemperatureEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetTriggerMode ( int mode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetTriggerMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetTriggerInvert ( int mode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetTriggerInvert'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall GetTriggerLevelRange ( float * minimum , float * maximum ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetTriggerLevelRange'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetTriggerLevel ( float f_level ); 
fcns.thunkname{fcnNum}='uint32floatThunk';fcns.name{fcnNum}='SetTriggerLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'single'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetIODirection ( int index , int iDirection ); 
fcns.thunkname{fcnNum}='uint32int32int32Thunk';fcns.name{fcnNum}='SetIODirection'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetIOLevel ( int index , int iLevel ); 
fcns.thunkname{fcnNum}='uint32int32int32Thunk';fcns.name{fcnNum}='SetIOLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetUserEvent ( HANDLE userEvent ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='SetUserEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetUSGenomics ( long width , long height ); 
fcns.thunkname{fcnNum}='uint32longlongThunk';fcns.name{fcnNum}='SetUSGenomics'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetVerticalRowBuffer ( int rows ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetVerticalRowBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetVerticalSpeed ( int index ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetVerticalSpeed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetVirtualChip ( int state ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetVirtualChip'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetVSAmplitude ( int index ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetVSAmplitude'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall SetVSSpeed ( int index ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='SetVSSpeed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall ShutDown ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='ShutDown'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  unsigned int __stdcall StartAcquisition ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='StartAcquisition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  unsigned int __stdcall UnMapPhysicalAddress ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='UnMapPhysicalAddress'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  unsigned int __stdcall WaitForAcquisition ( void ); 
fcns.thunkname{fcnNum}='uint32voidThunk';fcns.name{fcnNum}='WaitForAcquisition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  unsigned int __stdcall WaitForAcquisitionByHandle ( long cameraHandle ); 
fcns.thunkname{fcnNum}='uint32longThunk';fcns.name{fcnNum}='WaitForAcquisitionByHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
%  unsigned int __stdcall WaitForAcquisitionByHandleTimeOut ( long cameraHandle , int iTimeOutMs ); 
fcns.thunkname{fcnNum}='uint32longint32Thunk';fcns.name{fcnNum}='WaitForAcquisitionByHandleTimeOut'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'long', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall WaitForAcquisitionTimeOut ( int iTimeOutMs ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='WaitForAcquisitionTimeOut'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall WhiteBalance ( WORD * wRed , WORD * wGreen , WORD * wBlue , float * fRelR , float * fRelB , WhiteBalanceInfo * info ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WhiteBalance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'singlePtr', 'singlePtr', 'WHITEBALANCEINFOPtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall Filter_SetMode ( unsigned int mode ); 
fcns.thunkname{fcnNum}='uint32uint32Thunk';fcns.name{fcnNum}='Filter_SetMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall Filter_GetMode ( unsigned int * mode ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='Filter_GetMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall Filter_SetThreshold ( float threshold ); 
fcns.thunkname{fcnNum}='uint32floatThunk';fcns.name{fcnNum}='Filter_SetThreshold'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'single'};fcnNum=fcnNum+1;
%  unsigned int __stdcall Filter_GetThreshold ( float * threshold ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='Filter_GetThreshold'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall Filter_SetDataAveragingMode ( int mode ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='Filter_SetDataAveragingMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall Filter_GetDataAveragingMode ( int * mode ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='Filter_GetDataAveragingMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall Filter_SetAveragingFrameCount ( int frames ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='Filter_SetAveragingFrameCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall Filter_GetAveragingFrameCount ( int * frames ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='Filter_GetAveragingFrameCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall Filter_SetAveragingFactor ( int averagingFactor ); 
fcns.thunkname{fcnNum}='uint32int32Thunk';fcns.name{fcnNum}='Filter_SetAveragingFactor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall Filter_GetAveragingFactor ( int * averagingFactor ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='Filter_GetAveragingFactor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
%  unsigned int __stdcall PostProcessNoiseFilter ( long * pInputImage , long * pOutputImage , int iOutputBufferSize , int iBaseline , int iMode , float fThreshold , int iHeight , int iWidth ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrint32int32int32floatint32int32Thunk';fcns.name{fcnNum}='PostProcessNoiseFilter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'int32', 'int32', 'int32', 'single', 'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall PostProcessCountConvert ( long * pInputImage , long * pOutputImage , int iOutputBufferSize , int iNumImages , int iBaseline , int iMode , int iEmGain , float fQE , float fSensitivity , int iHeight , int iWidth ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrint32int32int32int32int32floatfloatint32int32Thunk';fcns.name{fcnNum}='PostProcessCountConvert'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'int32', 'int32', 'int32', 'int32', 'int32', 'single', 'single', 'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall PostProcessPhotonCounting ( long * pInputImage , long * pOutputImage , int iOutputBufferSize , int iNumImages , int iNumframes , int iNumberOfThresholds , float * pfThreshold , int iHeight , int iWidth ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrint32int32int32int32voidPtrint32int32Thunk';fcns.name{fcnNum}='PostProcessPhotonCounting'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'int32', 'int32', 'int32', 'int32', 'singlePtr', 'int32', 'int32'};fcnNum=fcnNum+1;
%  unsigned int __stdcall PostProcessDataAveraging ( long * pInputImage , long * pOutputImage , int iOutputBufferSize , int iNumImages , int iAveragingFilterMode , int iHeight , int iWidth , int iFrameCount , int iAveragingFactor ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrint32int32int32int32int32int32int32Thunk';fcns.name{fcnNum}='PostProcessDataAveraging'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'longPtr', 'longPtr', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
structs.HWND__.members=struct('unused', 'int32');
structs.s_SYSTEMTIME.members=struct('wYear', 'uint16', 'wMonth', 'uint16', 'wDayOfWeek', 'uint16', 'wDay', 'uint16', 'wHour', 'uint16', 'wMinute', 'uint16', 'wSecond', 'uint16', 'wMilliseconds', 'uint16');
structs.ANDORCAPS.members=struct('ulSize', 'ulong', 'ulAcqModes', 'ulong', 'ulReadModes', 'ulong', 'ulTriggerModes', 'ulong', 'ulCameraType', 'ulong', 'ulPixelMode', 'ulong', 'ulSetFunctions', 'ulong', 'ulGetFunctions', 'ulong', 'ulFeatures', 'ulong', 'ulPCICard', 'ulong', 'ulEMGainCapability', 'ulong', 'ulFTReadModes', 'ulong');
structs.COLORDEMOSAICINFO.members=struct('iX', 'int32', 'iY', 'int32', 'iAlgorithm', 'int32', 'iXPhase', 'int32', 'iYPhase', 'int32', 'iBackground', 'int32');
structs.WHITEBALANCEINFO.members=struct('iSize', 'int32', 'iX', 'int32', 'iY', 'int32', 'iAlgorithm', 'int32', 'iROI_left', 'int32', 'iROI_right', 'int32', 'iROI_top', 'int32', 'iROI_bottom', 'int32', 'iOperation', 'int32');
enuminfo.AT_VersionInfoId=struct('AT_SDKVersion',1073741824,'AT_DeviceDriverVersion',1073741825);
enuminfo.AT_DDGLiteChannelId=struct('AT_DDGLite_ChannelA',1073741824,'AT_DDGLite_ChannelB',1073741825,'AT_DDGLite_ChannelC',1073741826);
methodinfo=fcns;