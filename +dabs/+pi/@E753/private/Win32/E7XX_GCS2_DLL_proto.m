function [methodinfo,structs,enuminfo,ThunkLibName]=E7XX_GCS2_DLL_proto
%E7XX_GCS2_DLL_PROTO Create structures to define interfaces found in 'E7XX_GCS2_DLL'.

%This function was generated by loadlibrary.m parser version 1.1.6.33 on Thu May 30 10:17:37 2013
%perl options:'E7XX_GCS2_DLL.i -outfile=E7XX_GCS2_DLL_proto.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% int  WINAPI E7XX_InterfaceSetupDlg ( const char * szRegKeyName ); 
fcns.name{fcnNum}='E7XX_InterfaceSetupDlg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_ConnectRS232 ( int iPortNumber , int iBaudRate ); 
fcns.name{fcnNum}='E7XX_ConnectRS232'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_ConnectNIgpib ( int iBoardNumber , int nDeviceAddress ); 
fcns.name{fcnNum}='E7XX_ConnectNIgpib'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_ConnectPciBoard ( int iBoardNumber ); 
fcns.name{fcnNum}='E7XX_ConnectPciBoard'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_ConnectPciBoardAndReboot ( int iBoardNumber ); 
fcns.name{fcnNum}='E7XX_ConnectPciBoardAndReboot'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_ConnectTCPIP ( const char * szHostname , int port ); 
fcns.name{fcnNum}='E7XX_ConnectTCPIP'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_ConnectTCPIPByDescription ( const char * szDescription ); 
fcns.name{fcnNum}='E7XX_ConnectTCPIPByDescription'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_EnableTCPIPScan ( int iMask ); 
fcns.name{fcnNum}='E7XX_EnableTCPIPScan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_EnumerateTCPIPDevices ( char * szBuffer , int iBufferSize , const char * szFilter ); 
fcns.name{fcnNum}='E7XX_EnumerateTCPIPDevices'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_OpenRS232DaisyChain ( int iPortNumber , int iBaudRate , int * pNumberOfConnectedDaisyChainDevices , char * szDeviceIDNs , int iBufferSize ); 
fcns.name{fcnNum}='E7XX_OpenRS232DaisyChain'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_ConnectDaisyChainDevice ( int iPortId , int iDeviceNumber ); 
fcns.name{fcnNum}='E7XX_ConnectDaisyChainDevice'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% void  WINAPI E7XX_CloseDaisyChain ( int iPortId ); 
fcns.name{fcnNum}='E7XX_CloseDaisyChain'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_EnumerateUSB ( char * szBuffer , int iBufferSize , const char * szFilter ); 
fcns.name{fcnNum}='E7XX_EnumerateUSB'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_ConnectUSB ( const char * szDescription ); 
fcns.name{fcnNum}='E7XX_ConnectUSB'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_ChangeNIgpibAddress ( int ID , int iDeviceAddress ); 
fcns.name{fcnNum}='E7XX_ChangeNIgpibAddress'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_IsConnected ( int ID ); 
fcns.name{fcnNum}='E7XX_IsConnected'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% void  WINAPI E7XX_CloseConnection ( int ID ); 
fcns.name{fcnNum}='E7XX_CloseConnection'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_GetError ( int ID ); 
fcns.name{fcnNum}='E7XX_GetError'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_SetErrorCheck ( int ID , int bErrorCheck ); 
fcns.name{fcnNum}='E7XX_SetErrorCheck'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_TranslateError ( int iErrorNumber , char * szErrorMessage , int iBufferSize ); 
fcns.name{fcnNum}='E7XX_TranslateError'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qERR ( int ID , int * piError ); 
fcns.name{fcnNum}='E7XX_qERR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qIDN ( int ID , char * szBuffer , int iBufferSize ); 
fcns.name{fcnNum}='E7XX_qIDN'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_INI ( int ID , const char * szAxes ); 
fcns.name{fcnNum}='E7XX_INI'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qHLP ( int ID , char * szBuffer , int iBufferSize ); 
fcns.name{fcnNum}='E7XX_qHLP'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qHPA ( int ID , char * szBuffer , int iBufferSize ); 
fcns.name{fcnNum}='E7XX_qHPA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_CSV ( int ID , double dCommandSyntaxVersion ); 
fcns.name{fcnNum}='E7XX_CSV'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'double'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qCSV ( int ID , double * pdCommandSyntaxVersion ); 
fcns.name{fcnNum}='E7XX_qCSV'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qOVF ( int ID , const char * szAxes , int * pbValueArray ); 
fcns.name{fcnNum}='E7XX_qOVF'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_RBT ( int ID ); 
fcns.name{fcnNum}='E7XX_RBT'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_REP ( int ID ); 
fcns.name{fcnNum}='E7XX_REP'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_SSN ( int ID , const char * szSerialNumber ); 
fcns.name{fcnNum}='E7XX_SSN'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qSSN ( int ID , char * szSerialNumber , int iBufferSize ); 
fcns.name{fcnNum}='E7XX_qSSN'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qVER ( int ID , char * szVersion , int iBufferSize ); 
fcns.name{fcnNum}='E7XX_qVER'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_BDR ( int ID , int iBaudRate ); 
fcns.name{fcnNum}='E7XX_BDR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qBDR ( int ID , int * piBaudRate ); 
fcns.name{fcnNum}='E7XX_qBDR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_DBR ( int ID , int iBaudRate ); 
fcns.name{fcnNum}='E7XX_DBR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qDBR ( int ID , int * piBaudRate ); 
fcns.name{fcnNum}='E7XX_qDBR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_CCT ( int ID , int iCommandType ); 
fcns.name{fcnNum}='E7XX_CCT'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_RTO ( int ID , const char * szAxes ); 
fcns.name{fcnNum}='E7XX_RTO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qRTO ( int ID , const char * szAxes , int * piValueArray ); 
fcns.name{fcnNum}='E7XX_qRTO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_IsControllerReady ( int ID , int * piControllerReady ); 
fcns.name{fcnNum}='E7XX_IsControllerReady'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_IFC ( int ID , const char * szParameters , const char * szValues ); 
fcns.name{fcnNum}='E7XX_IFC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qIFC ( int ID , const char * szParameters , char * szBuffer , int iBufferSize ); 
fcns.name{fcnNum}='E7XX_qIFC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_IFS ( int ID , const char * szPassword , const char * szParameters , const char * szValues ); 
fcns.name{fcnNum}='E7XX_IFS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qIFS ( int ID , const char * szParameters , char * szBuffer , int iBufferSize ); 
fcns.name{fcnNum}='E7XX_qIFS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qHAR ( int ID , const char * szAxes , int * pbValueArray ); 
fcns.name{fcnNum}='E7XX_qHAR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qLIM ( int ID , const char * szAxes , int * pbValueArray ); 
fcns.name{fcnNum}='E7XX_qLIM'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qTRS ( int ID , const char * szAxes , int * pbValueArray ); 
fcns.name{fcnNum}='E7XX_qTRS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_STC ( int ID , const char * szTerminationString ); 
fcns.name{fcnNum}='E7XX_STC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qSTC ( int ID , char * szBuffer , int iBufferSize ); 
fcns.name{fcnNum}='E7XX_qSTC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_MOV ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_MOV'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qMOV ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_qMOV'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_MVR ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_MVR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_POS ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_POS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qPOS ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_qPOS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_IsMoving ( int ID , const char * szAxes , int * pbValueArray ); 
fcns.name{fcnNum}='E7XX_IsMoving'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_HasPosChanged ( int ID , char * szAxes , int * pbValueArray ); 
fcns.name{fcnNum}='E7XX_HasPosChanged'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_HLT ( int ID , const char * szAxes ); 
fcns.name{fcnNum}='E7XX_HLT'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_STP ( int ID ); 
fcns.name{fcnNum}='E7XX_STP'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qONT ( int ID , const char * szAxes , int * pbValueArray ); 
fcns.name{fcnNum}='E7XX_qONT'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_AOS ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_AOS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qAOS ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_qAOS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_SVA ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_SVA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qSVA ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_qSVA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_SVR ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_SVR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_DFH ( int ID , const char * szAxes ); 
fcns.name{fcnNum}='E7XX_DFH'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qDFH ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_qDFH'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_GOH ( int ID , const char * szAxes ); 
fcns.name{fcnNum}='E7XX_GOH'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_DFF ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_DFF'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qDFF ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_qDFF'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qCST ( int ID , const char * szAxes , char * szNames , int iBufferSize ); 
fcns.name{fcnNum}='E7XX_qCST'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_CST ( int ID , const char * szAxes , const char * szNames ); 
fcns.name{fcnNum}='E7XX_CST'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qVST ( int ID , char * szValideStages , int iBufferSize ); 
fcns.name{fcnNum}='E7XX_qVST'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qTVI ( int ID , char * szPossibleAxisCharacters , int iBufferSize ); 
fcns.name{fcnNum}='E7XX_qTVI'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_SVO ( int ID , const char * szAxes , const int * pbValueArray ); 
fcns.name{fcnNum}='E7XX_SVO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qSVO ( int ID , const char * szAxes , int * pbValueArray ); 
fcns.name{fcnNum}='E7XX_qSVO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_VEL ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_VEL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qVEL ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_qVEL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_SPA ( int ID , const char * szAxes , const unsigned int * piParameterArray , const double * pdValueArray , const char * szStrings ); 
fcns.name{fcnNum}='E7XX_SPA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr', 'doublePtr', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qSPA ( int ID , const char * szAxes , unsigned int * piParameterArray , double * pdValueArray , char * szStrings , int iMaxStringSize ); 
fcns.name{fcnNum}='E7XX_qSPA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr', 'doublePtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_SEP ( int ID , const char * szPassword , const char * szAxes , const unsigned int * piParameterArray , const double * pdValueArray , const char * szStrings ); 
fcns.name{fcnNum}='E7XX_SEP'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'uint32Ptr', 'doublePtr', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qSEP ( int ID , const char * szAxes , unsigned int * iParameterArray , double * pdValueArray , char * szStrings , int iMaxStringSize ); 
fcns.name{fcnNum}='E7XX_qSEP'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr', 'doublePtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_WPA ( int ID , const char * szPassword , const char * szAxes , const unsigned int * piParameterArray ); 
fcns.name{fcnNum}='E7XX_WPA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_RPA ( int ID , const char * szAxes , const unsigned int * piParameterArray ); 
fcns.name{fcnNum}='E7XX_RPA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_STE ( int ID , char * szAxes , const double * pdStepSize ); 
fcns.name{fcnNum}='E7XX_STE'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qSTE ( int ID , char * szAxes , double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_qSTE'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_IMP ( int ID , const char * szAxes , const double * pdImpulseSize ); 
fcns.name{fcnNum}='E7XX_IMP'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qIMP ( int ID , char * szAxes , double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_qIMP'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_SAI ( int ID , const char * szOldAxes , const char * szNewAxes ); 
fcns.name{fcnNum}='E7XX_SAI'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qSAI ( int ID , char * szAxes , int iBifferSize ); 
fcns.name{fcnNum}='E7XX_qSAI'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qSAI_ALL ( int ID , char * szAxes , int iBifferSize ); 
fcns.name{fcnNum}='E7XX_qSAI_ALL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_CCL ( int ID , int iComandLevel , const char * szPassWord ); 
fcns.name{fcnNum}='E7XX_CCL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qCCL ( int ID , int * piComandLevel ); 
fcns.name{fcnNum}='E7XX_qCCL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_AVG ( int ID , int iAverrage ); 
fcns.name{fcnNum}='E7XX_AVG'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qAVG ( int ID , int * piAverrage ); 
fcns.name{fcnNum}='E7XX_qAVG'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_DIO ( int ID , const int * piChannelsArray , const int * pbValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_DIO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qDIO ( int ID , const int * piChannelsArray , int * pbValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qDIO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qTIO ( int ID , int * piInputNr , int * piOutputNr ); 
fcns.name{fcnNum}='E7XX_qTIO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_FNL ( int ID , const char * szAxes ); 
fcns.name{fcnNum}='E7XX_FNL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_FPL ( int ID , const char * szAxes ); 
fcns.name{fcnNum}='E7XX_FPL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_FRF ( int ID , const char * szAxes ); 
fcns.name{fcnNum}='E7XX_FRF'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qFRF ( int ID , const char * szAxes , int * pbValueArray ); 
fcns.name{fcnNum}='E7XX_qFRF'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_DLG ( int ID , const char * szAxes , const double * pdValarray ); 
fcns.name{fcnNum}='E7XX_DLG'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qDLG ( int ID , const char * szAxes , double * pdValarray ); 
fcns.name{fcnNum}='E7XX_qDLG'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_IsRunningMacro ( const int ID , int * pbRunningMacro ); 
fcns.name{fcnNum}='E7XX_IsRunningMacro'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_MAC_BEG ( const int ID , const char * szMacroName ); 
fcns.name{fcnNum}='E7XX_MAC_BEG'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_MAC_START ( const int ID , const char * szMacroName ); 
fcns.name{fcnNum}='E7XX_MAC_START'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_MAC_NSTART ( const int ID , const char * szMacroName , int nrRuns ); 
fcns.name{fcnNum}='E7XX_MAC_NSTART'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_MAC_END ( const int ID ); 
fcns.name{fcnNum}='E7XX_MAC_END'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_MAC_DEL ( const int ID , const char * szMacroName ); 
fcns.name{fcnNum}='E7XX_MAC_DEL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_MAC_qFREE ( const int ID , int * pNumberChars ); 
fcns.name{fcnNum}='E7XX_MAC_qFREE'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_MAC_DEF ( const int ID , const char * szMacroName ); 
fcns.name{fcnNum}='E7XX_MAC_DEF'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_MAC_qDEF ( const int ID , char * szBuffer , int iBifferSize ); 
fcns.name{fcnNum}='E7XX_MAC_qDEF'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qMAC ( const int ID , const char * szMacroName , char * szBuffer , int iBifferSize ); 
fcns.name{fcnNum}='E7XX_qMAC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_DEL ( const int ID , int nMilliSeconds ); 
fcns.name{fcnNum}='E7XX_DEL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_WAI ( const int ID , const char * szAxes ); 
fcns.name{fcnNum}='E7XX_WAI'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_WAC ( const int ID , const char * szCondition ); 
fcns.name{fcnNum}='E7XX_WAC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_MEX ( const int ID , const char * szCondition ); 
fcns.name{fcnNum}='E7XX_MEX'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_E7XXSendString ( int ID , const char * szString ); 
fcns.name{fcnNum}='E7XX_E7XXSendString'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_E7XXReadLine ( int ID , char * szString , int iBufferSize ); 
fcns.name{fcnNum}='E7XX_E7XXReadLine'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_GcsCommandset ( int ID , const char * szCommand ); 
fcns.name{fcnNum}='E7XX_GcsCommandset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_GcsGetAnswer ( int ID , char * szAnswer , int iBufferSize ); 
fcns.name{fcnNum}='E7XX_GcsGetAnswer'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_GcsGetAnswerSize ( int ID , int * iAnswerSize ); 
fcns.name{fcnNum}='E7XX_GcsGetAnswerSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_ATZ ( int ID , const char * szAxes , const double * pdLowVoltageArray , const int * pfUseDefaultArray ); 
fcns.name{fcnNum}='E7XX_ATZ'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qATZ ( int ID , const char * szAxes , int * piAtzResult ); 
fcns.name{fcnNum}='E7XX_qATZ'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qTMN ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_qTMN'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qTMX ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_qTMX'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_NLM ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_NLM'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qNLM ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_qNLM'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_PLM ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_PLM'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qPLM ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_qPLM'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_SSL ( int ID , const char * szAxes , const int * pbValueArray ); 
fcns.name{fcnNum}='E7XX_SSL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qSSL ( int ID , const char * szAxes , int * pbValueArray ); 
fcns.name{fcnNum}='E7XX_qSSL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_GetRefResult ( int ID , const char * szAxes , int * piReferenceResult ); 
fcns.name{fcnNum}='E7XX_GetRefResult'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_TWS ( int ID , const int * piTriggerChannelIdsArray , const int * piPointNumberArray , const int * piSwitchArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_TWS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_TWC ( int ID ); 
fcns.name{fcnNum}='E7XX_TWC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_TRO ( int ID , const int * piTriggerChannelIds , const int * piTriggerChannelEnabel , int iArraySize ); 
fcns.name{fcnNum}='E7XX_TRO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qTRO ( int ID , const int * piTriggerChannelIds , int * piTriggerChannelEnabel , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qTRO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_CTO ( int ID , const int * piTriggerOutputIdsArray , const int * piTriggerParameterArray , const double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_CTO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qCTO ( int ID , const int * piTriggerOutputIdsArray , const int * piTriggerParameterArray , double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qCTO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_WAV_SIN_P ( int ID , int iWaveTableId , int iOffsetOfFirstPointInWaveTable , int iNumberOfPoints , int iAddAppendWave , int iCenterPointOfWave , double dAmplitudeOfWave , double dOffsetOfWave , int iSegmentLength ); 
fcns.name{fcnNum}='E7XX_WAV_SIN_P'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_WAV_LIN ( int ID , int iWaveTableId , int iOffsetOfFirstPointInWaveTable , int iNumberOfPoints , int iAddAppendWave , int iNumberOfSpeedUpDownPointsInWave , double dAmplitudeOfWave , double dOffsetOfWave , int iSegmentLength ); 
fcns.name{fcnNum}='E7XX_WAV_LIN'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_WAV_RAMP ( int ID , int iWaveTableId , int iOffsetOfFirstPointInWaveTable , int iNumberOfPoints , int iAddAppendWave , int iCenterPointOfWave , int iNumberOfSpeedUpDownPointsInWave , double dAmplitudeOfWave , double dOffsetOfWave , int iSegmentLength ); 
fcns.name{fcnNum}='E7XX_WAV_RAMP'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_WAV_PNT ( int ID , int iWaveTableId , int iOffsetOfFirstPointInWaveTable , int iNumberOfPoints , int iAddAppendWave , const double * pdWavePoints ); 
fcns.name{fcnNum}='E7XX_WAV_PNT'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qWAV ( int ID , const int * piWaveTableIdsArray , const int * piParamereIdsArray , double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qWAV'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qGWD_SYNC ( int ID , int iWaveTableId , int iOffsetOfFirstPointInWaveTable , int iNumberOfValues , double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_qGWD_SYNC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qGWD ( int ID , const int * iWaveTableIdsArray , int iNumberOfWaveTables , int iOffset , int nrValues , double ** pdValarray , char * szGcsArrayHeader , int iGcsArrayHeaderMaxSize ); 
fcns.name{fcnNum}='E7XX_qGWD'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32', 'int32', 'int32', 'doublePtrPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_WGO ( int ID , const int * piWaveGeneratorIdsArray , const int * iStartModArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_WGO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qWGO ( int ID , const int * piWaveGeneratorIdsArray , int * piValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qWGO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_WGC ( int ID , const int * piWaveGeneratorIdsArray , const int * piNumberOfCyclesArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_WGC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qWGC ( int ID , const int * piWaveGeneratorIdsArray , int * piValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qWGC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_WSL ( int ID , const int * piWaveGeneratorIdsArray , const int * piWaveTableIdsArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_WSL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qWSL ( int ID , const int * piWaveGeneratorIdsArray , int * piWaveTableIdsArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qWSL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qTNR ( int ID , int * piNumberOfRecordCannels ); 
fcns.name{fcnNum}='E7XX_qTNR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_DRC ( int ID , const int * piRecordTableIdsArray , const char * szRecordSourceIds , const int * piRecordOptionArray ); 
fcns.name{fcnNum}='E7XX_DRC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qDRC ( int ID , const int * piRecordTableIdsArray , char * szRecordSourceIds , int * piRecordOptionArray , int iRecordSourceIdsBufferSize , int iRecordOptionArraySize ); 
fcns.name{fcnNum}='E7XX_qDRC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'cstring', 'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_WGR ( int ID ); 
fcns.name{fcnNum}='E7XX_WGR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qDRR_SYNC ( int ID , int iRecordTablelId , int iOffsetOfFirstPointInRecordTable , int iNumberOfValues , double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_qDRR_SYNC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qDRR ( int ID , const int * piRecTableIdsArray , int iNumberOfRecChannels , int iOffsetOfFirstPointInRecordTable , int iNumberOfValues , double ** pdValueArray , char * szGcsArrayHeader , int iGcsArrayHeaderMaxSize ); 
fcns.name{fcnNum}='E7XX_qDRR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32', 'int32', 'int32', 'doublePtrPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_RTR ( int ID , int piReportTableRate ); 
fcns.name{fcnNum}='E7XX_RTR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qRTR ( int ID , int * piReportTableRate ); 
fcns.name{fcnNum}='E7XX_qRTR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qTWG ( int ID , int * piNumberOfWaveGenerators ); 
fcns.name{fcnNum}='E7XX_qTWG'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_WMS ( int ID , const int * piWaveTableIds , const int * iWaveTableMaimumSize , int iArraySize ); 
fcns.name{fcnNum}='E7XX_WMS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qWMS ( int ID , const int * piWaveTableIds , int * iWaveTableMaimumSize , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qWMS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_DTC ( int ID , const int * piDdlTableIdsArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_DTC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qDTL ( int ID , const int * piDdlTableIdsArray , int * piValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qDTL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_WCL ( int ID , const int * piWaveTableIdsArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_WCL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_WOS ( int ID , const int * piWaveGeneratorIdsArray , const double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_WOS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qWOS ( int ID , const int * piWaveGeneratorIdsArray , double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qWOS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_WTR ( int ID , const int * piWaveGeneratorIdsArray , const int * piTableRateArray , const int * piInterpolationTypeArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_WTR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qWTR ( int ID , const int * piWaveGeneratorIdsArray , long * piTableRateArray , long * piInterpolationTypeArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qWTR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'longPtr', 'longPtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_DDL ( int ID , int iDdlTableId , int iOffsetOfFirstPointInDdlTable , int iNumberOfValues , const double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_DDL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qDDL_SYNC ( int ID , int iDdlTableId , int iOffsetOfFirstPointInDdlTable , int iNumberOfValues , double * pdValueArray ); 
fcns.name{fcnNum}='E7XX_qDDL_SYNC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qDDL ( int ID , const int * iDdlTableIdsArray , int iNumberOfDdlTables , int iOffset , int nrValues , double ** pdValarray , char * szGcsArrayHeader , int iGcsArrayHeaderMaxSize ); 
fcns.name{fcnNum}='E7XX_qDDL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32', 'int32', 'int32', 'doublePtrPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qTLT ( int ID , int * piNumberOfDdlTables ); 
fcns.name{fcnNum}='E7XX_qTLT'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_DPO ( int ID , const char * szAxes ); 
fcns.name{fcnNum}='E7XX_DPO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_DRT ( int ID , const int * piRecordChannelIdsArray , const int * piTriggerSourceArray , const char * szValues , int iArraySize ); 
fcns.name{fcnNum}='E7XX_DRT'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qDRT ( int ID , const int * piRecordChannelIdsArray , int * piTriggerSourceArray , char * szValues , int iArraySize , int iValueBufferLength ); 
fcns.name{fcnNum}='E7XX_qDRT'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qHDR ( int ID , char * szBuffer , int iBufferSize ); 
fcns.name{fcnNum}='E7XX_qHDR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_IsGeneratorRunning ( int ID , const int * piWaveGeneratorIdsArray , int * pbValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_IsGeneratorRunning'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_VMA ( int ID , const int * piPiezoChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_VMA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qVMA ( int ID , const int * piPiezoChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qVMA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_VMI ( int ID , const int * piPiezoChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_VMI'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qVMI ( int ID , const int * piPiezoChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qVMI'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_VOL ( int ID , const int * piPiezoChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_VOL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qVOL ( int ID , const int * piPiezoChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qVOL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qTPC ( int ID , int * piNumberOfPiezoChannels ); 
fcns.name{fcnNum}='E7XX_qTPC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qTAD ( int ID , const int * piSensorsChannelsArray , int * piValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qTAD'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qTNS ( int ID , const int * piSensorsChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qTNS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qTSP ( int ID , const int * piSensorsChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qTSP'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_SCN ( int ID , const int * piSensorsChannelsArray , const int * piValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_SCN'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qSCN ( int ID , const int * piSensorsChannelsArray , int * piValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qSCN'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qTSC ( int ID , int * piNumberOfSensorChannels ); 
fcns.name{fcnNum}='E7XX_qTSC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_CLD ( int ID , const int * piSensorsChannels , const int * piAddress , const int * piValarray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_CLD'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qCLD ( int ID , const int * piSensorsChannels , const int * piAddress , int * piValarray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qCLD'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_APG ( int ID , const int * piNexlineChannelsArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_APG'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qAPG ( int ID , const int * piNexlineChannelsArray , int * piValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qAPG'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_OAD ( int ID , const int * piNexlineChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_OAD'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qOAD ( int ID , const int * piNexlineChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qOAD'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_OCD ( int ID , const int * piNexlineChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_OCD'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qOCD ( int ID , const int * piNexlineChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qOCD'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_OSM ( int ID , const int * piNexlineChannelsArray , const int * piValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_OSM'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qOSM ( int ID , const int * piNexlineChannelsArray , int * piValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qOSM'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qOSN ( int ID , const int * piNexlineChannelsArray , int * piValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qOSN'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_SSA ( int ID , const int * piNexlineChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_SSA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_qSSA ( int ID , const int * piNexlineChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_qSSA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_RNP ( int ID , const int * piNexlineChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_RNP'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_PGS ( int ID , const int * piNexlineChannelsArray , int iArraySize ); 
fcns.name{fcnNum}='E7XX_PGS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_GetSupportedFunctions ( int ID , int * piComandLevelArray , int iMaxlen , char * szFunctionNames , int iMaxFunctioNamesLength ); 
fcns.name{fcnNum}='E7XX_GetSupportedFunctions'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_GetSupportedParameters ( int ID , unsigned int * piParameterIdArray , int * piComandLevelArray , int * piMennoryLocationArray , int * piDataType , int * piNumberOfItems , int iMaxlen , char * szParameterName , int iMaxParameterNameSize ); 
fcns.name{fcnNum}='E7XX_GetSupportedParameters'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_GetSupportedControllers ( char * buffer , int maxlen ); 
fcns.name{fcnNum}='E7XX_GetSupportedControllers'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_GetAsyncBufferIndex ( int ID ); 
fcns.name{fcnNum}='E7XX_GetAsyncBufferIndex'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  WINAPI E7XX_GetAsyncBuffer ( int ID , double ** pdValArray ); 
fcns.name{fcnNum}='E7XX_GetAsyncBuffer'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'doublePtrPtr'};fcnNum=fcnNum+1;
methodinfo=fcns;