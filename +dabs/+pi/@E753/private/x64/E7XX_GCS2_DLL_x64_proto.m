function [methodinfo,structs,enuminfo,ThunkLibName]=E7XX_GCS2_DLL_x64_proto
%E7XX_GCS2_DLL_X64_PROTO Create structures to define interfaces found in 'E7XX_GCS2_DLL_MOD'.

%This function was generated by loadlibrary.m parser version 1.1.6.33 on Mon Jun 24 19:58:23 2013
%perl options:'E7XX_GCS2_DLL_MOD.i -outfile=E7XX_GCS2_DLL_x64_proto.m -thunkfile=E7XX_GCS2_DLL_x64_thunk_pcwin64.c'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'E7XX_GCS2_DLL_x64_thunk_pcwin64');
% long E7XX_InterfaceSetupDlg ( const char * szRegKeyName ); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='E7XX_InterfaceSetupDlg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% long E7XX_ConnectRS232 ( long nPortNr , long iBaudRate ); 
fcns.thunkname{fcnNum}='longlonglongThunk';fcns.name{fcnNum}='E7XX_ConnectRS232'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
% long E7XX_ConnectRS232ByDevName ( const char * szDevName , long BaudRate ); 
fcns.thunkname{fcnNum}='longcstringlongThunk';fcns.name{fcnNum}='E7XX_ConnectRS232ByDevName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long'};fcnNum=fcnNum+1;
% long E7XX_OpenRS232DaisyChain ( long iPortNumber , long iBaudRate , long * pNumberOfConnectedDaisyChainDevices , char * szDeviceIDNs , long iBufferSize ); 
fcns.thunkname{fcnNum}='longlonglongvoidPtrcstringlongThunk';fcns.name{fcnNum}='E7XX_OpenRS232DaisyChain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long', 'longPtr', 'cstring', 'long'};fcnNum=fcnNum+1;
% long E7XX_ConnectDaisyChainDevice ( long iPortId , long iDeviceNumber ); 
fcns.thunkname{fcnNum}='longlonglongThunk';fcns.name{fcnNum}='E7XX_ConnectDaisyChainDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
% void E7XX_CloseDaisyChain ( long iPortId ); 
fcns.thunkname{fcnNum}='voidlongThunk';fcns.name{fcnNum}='E7XX_CloseDaisyChain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% long E7XX_ConnectNIgpib ( const long nBoard , const long nDevAddr ); 
fcns.thunkname{fcnNum}='longlonglongThunk';fcns.name{fcnNum}='E7XX_ConnectNIgpib'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'long'};fcnNum=fcnNum+1;
% long E7XX_ConnectTCPIP ( const char * szHostname , long port ); 
fcns.thunkname{fcnNum}='longcstringlongThunk';fcns.name{fcnNum}='E7XX_ConnectTCPIP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long'};fcnNum=fcnNum+1;
% long E7XX_EnableTCPIPScan ( long iMask ); 
fcns.thunkname{fcnNum}='longlongThunk';fcns.name{fcnNum}='E7XX_EnableTCPIPScan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% long E7XX_EnumerateTCPIPDevices ( char * szBuffer , long iBufferSize , const char * szFilter ); 
fcns.thunkname{fcnNum}='longcstringlongcstringThunk';fcns.name{fcnNum}='E7XX_EnumerateTCPIPDevices'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'cstring'};fcnNum=fcnNum+1;
% long E7XX_ConnectTCPIPByDescription ( const char * szDescription ); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='E7XX_ConnectTCPIPByDescription'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% long E7XX_EnumerateUSB ( char * szBuffer , long iBufferSize , const char * szFilter ); 
fcns.thunkname{fcnNum}='longcstringlongcstringThunk';fcns.name{fcnNum}='E7XX_EnumerateUSB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'cstring'};fcnNum=fcnNum+1;
% long E7XX_ConnectUSB ( const char * szDescription ); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='E7XX_ConnectUSB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% long E7XX_ConnectUSBWithBaudRate ( const char * szDescription , long iBaudRate ); 
fcns.thunkname{fcnNum}='longcstringlongThunk';fcns.name{fcnNum}='E7XX_ConnectUSBWithBaudRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long'};fcnNum=fcnNum+1;
% long E7XX_OpenUSBDaisyChain ( const char * szDescription , long * pNumberOfConnectedDaisyChainDevices , char * szDeviceIDNs , long iBufferSize ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrcstringlongThunk';fcns.name{fcnNum}='E7XX_OpenUSBDaisyChain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'cstring', 'long'};fcnNum=fcnNum+1;
% int E7XX_IsConnected ( long ID ); 
fcns.thunkname{fcnNum}='int32longThunk';fcns.name{fcnNum}='E7XX_IsConnected'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% void E7XX_CloseConnection ( long ID ); 
fcns.thunkname{fcnNum}='voidlongThunk';fcns.name{fcnNum}='E7XX_CloseConnection'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% long E7XX_GetError ( long ID ); 
fcns.thunkname{fcnNum}='longlongThunk';fcns.name{fcnNum}='E7XX_GetError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% int E7XX_SetErrorCheck ( long ID , int bErrorCheck ); 
fcns.thunkname{fcnNum}='int32longint32Thunk';fcns.name{fcnNum}='E7XX_SetErrorCheck'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32'};fcnNum=fcnNum+1;
% int E7XX_TranslateError ( long errNr , char * szBuffer , long iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringlongThunk';fcns.name{fcnNum}='E7XX_TranslateError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'long'};fcnNum=fcnNum+1;
% int E7XX_qERR ( long ID , long * pnError ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='E7XX_qERR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr'};fcnNum=fcnNum+1;
% int E7XX_qIDN ( long ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringint32Thunk';fcns.name{fcnNum}='E7XX_qIDN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_INI ( long ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='E7XX_INI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_qHLP ( long ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringint32Thunk';fcns.name{fcnNum}='E7XX_qHLP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qHPA ( long ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringint32Thunk';fcns.name{fcnNum}='E7XX_qHPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qHPV ( long ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringint32Thunk';fcns.name{fcnNum}='E7XX_qHPV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qCSV ( long ID , double * pdCommandSyntaxVersion ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='E7XX_qCSV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_qOVF ( long ID , const char * szAxes , int * piValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qOVF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_RBT ( long ID ); 
fcns.thunkname{fcnNum}='int32longThunk';fcns.name{fcnNum}='E7XX_RBT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% int E7XX_REP ( long ID ); 
fcns.thunkname{fcnNum}='int32longThunk';fcns.name{fcnNum}='E7XX_REP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% int E7XX_BDR ( long ID , int iBaudRate ); 
fcns.thunkname{fcnNum}='int32longint32Thunk';fcns.name{fcnNum}='E7XX_BDR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qBDR ( long ID , int * iBaudRate ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='E7XX_qBDR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_DBR ( long ID , int iBaudRate ); 
fcns.thunkname{fcnNum}='int32longint32Thunk';fcns.name{fcnNum}='E7XX_DBR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qDBR ( long ID , int * iBaudRate ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='E7XX_qDBR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_qVER ( long ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringint32Thunk';fcns.name{fcnNum}='E7XX_qVER'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qSSN ( long ID , char * szSerialNumber , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringint32Thunk';fcns.name{fcnNum}='E7XX_qSSN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_CCT ( long ID , int iCommandType ); 
fcns.thunkname{fcnNum}='int32longint32Thunk';fcns.name{fcnNum}='E7XX_CCT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qCCT ( long ID , int * iCommandType ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='E7XX_qCCT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_qTVI ( long ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringint32Thunk';fcns.name{fcnNum}='E7XX_qTVI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_IFC ( long ID , const char * szParameters , const char * szValues ); 
fcns.thunkname{fcnNum}='int32longcstringcstringThunk';fcns.name{fcnNum}='E7XX_IFC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_qIFC ( long ID , const char * szParameters , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringcstringint32Thunk';fcns.name{fcnNum}='E7XX_qIFC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_IFS ( long ID , const char * szPassword , const char * szParameters , const char * szValues ); 
fcns.thunkname{fcnNum}='int32longcstringcstringcstringThunk';fcns.name{fcnNum}='E7XX_IFS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_qIFS ( long ID , const char * szParameters , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringcstringint32Thunk';fcns.name{fcnNum}='E7XX_qIFS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_MOV ( long ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_MOV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_qMOV ( long ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qMOV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_MVR ( long ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_MVR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_MVE ( long ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_MVE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_POS ( long ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_POS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_qPOS ( long ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qPOS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_IsMoving ( long ID , const char * szAxes , int * pbValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_IsMoving'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_HLT ( long ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='E7XX_HLT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_STP ( long ID ); 
fcns.thunkname{fcnNum}='int32longThunk';fcns.name{fcnNum}='E7XX_STP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% int E7XX_qONT ( long ID , const char * szAxes , int * pbValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qONT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_RTO ( long ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='E7XX_RTO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_qRTO ( long ID , const char * szAxes , int * piValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qRTO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_ATZ ( long ID , const char * szAxes , const double * pdLowvoltageArray , const int * pfUseDefaultArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='E7XX_ATZ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_qATZ ( long ID , const char * szAxes , int * piAtzResultArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qATZ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_AOS ( int ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_AOS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_qAOS ( int ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qAOS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_SVA ( long ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_SVA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_qSVA ( long ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qSVA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_SVR ( long ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_SVR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_DFH ( long ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='E7XX_DFH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_qDFH ( long ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qDFH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_GOH ( long ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='E7XX_GOH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_qCST ( long ID , const char * szAxes , char * szNames , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringcstringint32Thunk';fcns.name{fcnNum}='E7XX_qCST'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_CST ( long ID , const char * szAxes , const char * szNames ); 
fcns.thunkname{fcnNum}='int32longcstringcstringThunk';fcns.name{fcnNum}='E7XX_CST'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_qVST ( long ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringint32Thunk';fcns.name{fcnNum}='E7XX_qVST'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qPUN ( long ID , const char * szAxes , char * szUnit , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringcstringint32Thunk';fcns.name{fcnNum}='E7XX_qPUN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_SVO ( long ID , const char * szAxes , const int * pbValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_SVO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_qSVO ( long ID , const char * szAxes , int * pbValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qSVO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_SMO ( long ID , const char * szAxes , const int * piValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_SMO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_qSMO ( long ID , const char * szAxes , int * piValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qSMO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_DCO ( long ID , const char * szAxes , const int * pbValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_DCO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_qDCO ( long ID , const char * szAxes , int * pbValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qDCO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_RON ( long ID , const char * szAxes , const int * pbValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_RON'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_qRON ( long ID , const char * szAxes , int * pbValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qRON'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_VEL ( long ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_VEL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_qVEL ( long ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qVEL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_ACC ( long ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_ACC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_qACC ( long ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qACC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_DEC ( long ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_DEC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_qDEC ( long ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qDEC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_VCO ( long ID , const char * szAxes , const int * pbValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_VCO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_qVCO ( long ID , const char * szAxes , int * pbValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qVCO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_SPA ( long ID , const char * szAxes , const unsigned int * iParameterArray , const double * pdValueArray , const char * szStrings ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='E7XX_SPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'uint32Ptr', 'doublePtr', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_qSPA ( long ID , const char * szAxes , unsigned int * iParameterArray , double * pdValueArray , char * szStrings , int iMaxNameSize ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='E7XX_qSPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'uint32Ptr', 'doublePtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_SEP ( long ID , const char * szPassword , const char * szAxes , const unsigned int * iParameterArray , const double * pdValueArray , const char * szStrings ); 
fcns.thunkname{fcnNum}='int32longcstringcstringvoidPtrvoidPtrcstringThunk';fcns.name{fcnNum}='E7XX_SEP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring', 'uint32Ptr', 'doublePtr', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_qSEP ( long ID , const char * szAxes , unsigned int * iParameterArray , double * pdValueArray , char * szStrings , int iMaxNameSize ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='E7XX_qSEP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'uint32Ptr', 'doublePtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_WPA ( long ID , const char * szPassword , const char * szAxes , const unsigned int * iParameterArray ); 
fcns.thunkname{fcnNum}='int32longcstringcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_WPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% int E7XX_RPA ( long ID , const char * szAxes , const unsigned int * iParameterArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_RPA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% int E7XX_SPA_String ( long ID , const char * szAxes , const unsigned int * iParameterArray , const char * szStrings ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrcstringThunk';fcns.name{fcnNum}='E7XX_SPA_String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'uint32Ptr', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_qSPA_String ( long ID , const char * szAxes , const unsigned int * iParameterArray , char * szStrings , int iMaxNameSize ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrcstringint32Thunk';fcns.name{fcnNum}='E7XX_qSPA_String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'uint32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_SEP_String ( long ID , const char * szPassword , const char * szAxes , const unsigned int * iParameterArray , const char * szStrings ); 
fcns.thunkname{fcnNum}='int32longcstringcstringvoidPtrcstringThunk';fcns.name{fcnNum}='E7XX_SEP_String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring', 'uint32Ptr', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_qSEP_String ( long ID , const char * szAxes , unsigned int * iParameterArray , char * szStrings , int iMaxNameSize ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrcstringint32Thunk';fcns.name{fcnNum}='E7XX_qSEP_String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'uint32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_STE ( long ID , const char * szAxes , const double * dOffsetArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_STE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_qSTE ( long ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qSTE'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_IMP ( long ID , const char * szAxes , const double * pdImpulseSize ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_IMP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_IMP_PulseWidth ( long ID , char cAxis , double dOffset , int iPulseWidth ); 
fcns.thunkname{fcnNum}='int32longint8doubleint32Thunk';fcns.name{fcnNum}='E7XX_IMP_PulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int8', 'double', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qIMP ( long ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qIMP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_SAI ( long ID , const char * szOldAxes , const char * szNewAxes ); 
fcns.thunkname{fcnNum}='int32longcstringcstringThunk';fcns.name{fcnNum}='E7XX_SAI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_qSAI ( long ID , char * szAxes , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringint32Thunk';fcns.name{fcnNum}='E7XX_qSAI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qSAI_ALL ( long ID , char * szAxes , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringint32Thunk';fcns.name{fcnNum}='E7XX_qSAI_ALL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_CCL ( long ID , int iComandLevel , const char * szPassWord ); 
fcns.thunkname{fcnNum}='int32longint32cstringThunk';fcns.name{fcnNum}='E7XX_CCL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_qCCL ( long ID , int * piComandLevel ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='E7XX_qCCL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_AVG ( long ID , int iAverrageTime ); 
fcns.thunkname{fcnNum}='int32longint32Thunk';fcns.name{fcnNum}='E7XX_AVG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qAVG ( long ID , int * iAverrageTime ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='E7XX_qAVG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_qHAR ( long ID , const char * szAxes , int * pbValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qHAR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_qLIM ( long ID , const char * szAxes , int * pbValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qLIM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_qTRS ( long ID , const char * szAxes , int * pbValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qTRS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_FNL ( long ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='E7XX_FNL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_FPL ( long ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='E7XX_FPL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_FRF ( long ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='E7XX_FRF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_FED ( long ID , const char * szAxes , const int * piEdgeArray , const int * piParamArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='E7XX_FED'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_qFRF ( long ID , const char * szAxes , int * pbValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qFRF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_DIO ( long ID , const long * piChannelsArray , const int * pbValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_DIO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qDIO ( long ID , const long * piChannelsArray , int * pbValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qDIO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qTIO ( long ID , int * piInputNr , int * piOutputNr ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrThunk';fcns.name{fcnNum}='E7XX_qTIO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_IsControllerReady ( long ID , int * piControllerReady ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='E7XX_IsControllerReady'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_qSRG ( long ID , const char * szAxes , const int * iRegisterArray , int * iValArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='E7XX_qSRG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_ATC ( long ID , const int * piChannels , const int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_ATC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qATC ( long ID , const int * piChannels , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qATC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qATS ( long ID , const int * piChannels , const int * piOptions , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qATS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_IsRunningMacro ( long ID , int * pbRunningMacro ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='E7XX_IsRunningMacro'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_MAC_BEG ( long ID , const char * szMacroName ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='E7XX_MAC_BEG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_MAC_START ( long ID , const char * szMacroName ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='E7XX_MAC_START'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_MAC_NSTART ( long ID , const char * szMacroName , int nrRuns ); 
fcns.thunkname{fcnNum}='int32longcstringint32Thunk';fcns.name{fcnNum}='E7XX_MAC_NSTART'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_MAC_END ( long ID ); 
fcns.thunkname{fcnNum}='int32longThunk';fcns.name{fcnNum}='E7XX_MAC_END'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% int E7XX_MAC_DEL ( long ID , const char * szMacroName ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='E7XX_MAC_DEL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_MAC_DEF ( long ID , const char * szMacroName ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='E7XX_MAC_DEF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_MAC_qDEF ( long ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringint32Thunk';fcns.name{fcnNum}='E7XX_MAC_qDEF'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_MAC_qERR ( long ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringint32Thunk';fcns.name{fcnNum}='E7XX_MAC_qERR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qMAC ( long ID , const char * szMacroName , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringcstringint32Thunk';fcns.name{fcnNum}='E7XX_qMAC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qRMC ( long ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringint32Thunk';fcns.name{fcnNum}='E7XX_qRMC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_DEL ( long ID , int nMilliSeconds ); 
fcns.thunkname{fcnNum}='int32longint32Thunk';fcns.name{fcnNum}='E7XX_DEL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32'};fcnNum=fcnNum+1;
% int E7XX_WAC ( long ID , const char * szCondition ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='E7XX_WAC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_MEX ( long ID , const char * szCondition ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='E7XX_MEX'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_VAR ( long ID , const char * szVariables , const char * szValues ); 
fcns.thunkname{fcnNum}='int32longcstringcstringThunk';fcns.name{fcnNum}='E7XX_VAR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_qVAR ( long ID , const char * szVariables , char * szValues , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringcstringint32Thunk';fcns.name{fcnNum}='E7XX_qVAR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_GcsCommandset ( long ID , const char * szCommand ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='E7XX_GcsCommandset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_GcsGetAnswer ( long ID , char * szAnswer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringint32Thunk';fcns.name{fcnNum}='E7XX_GcsGetAnswer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_GcsGetAnswerSize ( long ID , int * iAnswerSize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='E7XX_GcsGetAnswerSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_qTMN ( long ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qTMN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_qTMX ( long ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qTMX'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_NLM ( long ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_NLM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_qNLM ( long ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qNLM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_PLM ( long ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_PLM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_qPLM ( long ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qPLM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_SSL ( long ID , const char * szAxes , const int * pbValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_SSL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_qSSL ( long ID , const char * szAxes , int * pbValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qSSL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_IsGeneratorRunning ( long ID , const int * piWaveGeneratorIds , int * pbValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_IsGeneratorRunning'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qTWG ( long ID , int * piWaveGenerators ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='E7XX_qTWG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_WAV_SIN_P ( long ID , int iWaveTableId , int iOffsetOfFirstPointInWaveTable , int iNumberOfPoints , int iAddAppendWave , int iCenterPointOfWave , double dAmplitudeOfWave , double dOffsetOfWave , int iSegmentLength ); 
fcns.thunkname{fcnNum}='int32longint32int32int32int32int32doubledoubleint32Thunk';fcns.name{fcnNum}='E7XX_WAV_SIN_P'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32', 'int32', 'int32', 'int32', 'int32', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
% int E7XX_WAV_LIN ( long ID , int iWaveTableId , int iOffsetOfFirstPointInWaveTable , int iNumberOfPoints , int iAddAppendWave , int iNumberOfSpeedUpDownPointsInWave , double dAmplitudeOfWave , double dOffsetOfWave , int iSegmentLength ); 
fcns.thunkname{fcnNum}='int32longint32int32int32int32int32doubledoubleint32Thunk';fcns.name{fcnNum}='E7XX_WAV_LIN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32', 'int32', 'int32', 'int32', 'int32', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
% int E7XX_WAV_RAMP ( long ID , int iWaveTableId , int iOffsetOfFirstPointInWaveTable , int iNumberOfPoints , int iAddAppendWave , int iCenterPointOfWave , int iNumberOfSpeedUpDownPointsInWave , double dAmplitudeOfWave , double dOffsetOfWave , int iSegmentLength ); 
fcns.thunkname{fcnNum}='int32longint32int32int32int32int32int32doubledoubleint32Thunk';fcns.name{fcnNum}='E7XX_WAV_RAMP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
% int E7XX_WAV_PNT ( long ID , int iWaveTableId , int iOffsetOfFirstPointInWaveTable , int iNumberOfPoints , int iAddAppendWave , const double * pdWavePoints ); 
fcns.thunkname{fcnNum}='int32longint32int32int32int32voidPtrThunk';fcns.name{fcnNum}='E7XX_WAV_PNT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32', 'int32', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_qWAV ( long ID , const int * piWaveTableIdsArray , const int * piParamereIdsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qWAV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_WGO ( long ID , const int * piWaveGeneratorIdsArray , const int * iStartModArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_WGO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qWGO ( long ID , const int * piWaveGeneratorIdsArray , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qWGO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_WGC ( long ID , const int * piWaveGeneratorIdsArray , const int * piNumberOfCyclesArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_WGC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qWGC ( long ID , const int * piWaveGeneratorIdsArray , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qWGC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_WSL ( long ID , const int * piWaveGeneratorIdsArray , const int * piWaveTableIdsArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_WSL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qWSL ( long ID , const int * piWaveGeneratorIdsArray , int * piWaveTableIdsArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qWSL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_DTC ( long ID , const int * piDdlTableIdsArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_DTC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qDTL ( long ID , const int * piDdlTableIdsArray , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qDTL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_WCL ( long ID , const int * piWaveTableIdsArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_WCL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qTLT ( long ID , int * piNumberOfDdlTables ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='E7XX_qTLT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_qGWD_SYNC ( long ID , int iWaveTableId , int iOffsetOfFirstPointInWaveTable , int iNumberOfValues , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longint32int32int32voidPtrThunk';fcns.name{fcnNum}='E7XX_qGWD_SYNC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_qGWD ( long ID , const int * iWaveTableIdsArray , int iNumberOfWaveTables , int iOffset , int nrValues , double ** pdValarray , char * szGcsArrayHeader , int iGcsArrayHeaderMaxSize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrint32int32int32voidPtrcstringint32Thunk';fcns.name{fcnNum}='E7XX_qGWD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32', 'int32', 'int32', 'doublePtrPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_WOS ( long ID , const int * iWaveTableIdsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_WOS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qWOS ( long ID , const int * iWaveTableIdsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qWOS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_WTR ( long ID , const int * piWaveGeneratorIdsArray , const int * piTableRateArray , const int * piInterpolationTypeArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_WTR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qWTR ( long ID , const int * piWaveGeneratorIdsArray , long * piTableRateArray , long * piInterpolationTypeArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qWTR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'longPtr', 'longPtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_DDL ( long ID , int iDdlTableId , int iOffsetOfFirstPointInDdlTable , int iNumberOfValues , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longint32int32int32voidPtrThunk';fcns.name{fcnNum}='E7XX_DDL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_qDDL_SYNC ( long ID , int iDdlTableId , int iOffsetOfFirstPointInDdlTable , int iNumberOfValues , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longint32int32int32voidPtrThunk';fcns.name{fcnNum}='E7XX_qDDL_SYNC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_qDDL ( long ID , const int * iDdlTableIdsArray , int iNumberOfDdlTables , int iOffset , int nrValues , double ** pdValarray , char * szGcsArrayHeader , int iGcsArrayHeaderMaxSize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrint32int32int32voidPtrcstringint32Thunk';fcns.name{fcnNum}='E7XX_qDDL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32', 'int32', 'int32', 'doublePtrPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_DPO ( long ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='E7XX_DPO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_qWMS ( long ID , const int * piWaveTableIds , int * iWaveTableMaimumSize , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qWMS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_TWC ( long ID ); 
fcns.thunkname{fcnNum}='int32longThunk';fcns.name{fcnNum}='E7XX_TWC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% int E7XX_TWS ( long ID , const int * piTriggerChannelIdsArray , const int * piPointNumberArray , const int * piSwitchArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_TWS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qTWS ( long ID , const int * iTriggerChannelIdsArray , int iNumberOfTriggerChannels , int iOffset , int nrValues , double ** pdValarray , char * szGcsArrayHeader , int iGcsArrayHeaderMaxSize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrint32int32int32voidPtrcstringint32Thunk';fcns.name{fcnNum}='E7XX_qTWS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32', 'int32', 'int32', 'doublePtrPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_CTO ( long ID , const int * piTriggerOutputIdsArray , const int * piTriggerParameterArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_CTO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qCTO ( long ID , const int * piTriggerOutputIdsArray , const int * piTriggerParameterArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qCTO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_TRO ( long ID , const long * piTriggerChannelIds , const int * pbTriggerChannelEnabel , long iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='E7XX_TRO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr', 'int32Ptr', 'long'};fcnNum=fcnNum+1;
% int E7XX_qTRO ( long ID , const long * piTriggerChannelIds , int * pbTriggerChannelEnabel , long iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='E7XX_qTRO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr', 'int32Ptr', 'long'};fcnNum=fcnNum+1;
% int E7XX_qHDR ( long ID , char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longcstringint32Thunk';fcns.name{fcnNum}='E7XX_qHDR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qTNR ( long ID , int * piNumberOfRecordCannels ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='E7XX_qTNR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_DRC ( long ID , const int * piRecordTableIdsArray , const char * szRecordSourceIds , const int * piRecordOptionArray ); 
fcns.thunkname{fcnNum}='int32longvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_DRC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_qDRC ( long ID , const int * piRecordTableIdsArray , char * szRecordSourceIds , int * piRecordOptionArray , int iRecordSourceIdsBufferSize , int iRecordOptionArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrcstringvoidPtrint32int32Thunk';fcns.name{fcnNum}='E7XX_qDRC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'cstring', 'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qDRR_SYNC ( long ID , int iRecordTablelId , int iOffsetOfFirstPointInRecordTable , int iNumberOfValues , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longint32int32int32voidPtrThunk';fcns.name{fcnNum}='E7XX_qDRR_SYNC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_qDRR ( long ID , const int * piRecTableIdIdsArray , int iNumberOfRecChannels , int iOffsetOfFirstPointInRecordTable , int iNumberOfValues , double ** pdValueArray , char * szGcsArrayHeader , int iGcsArrayHeaderMaxSize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrint32int32int32voidPtrcstringint32Thunk';fcns.name{fcnNum}='E7XX_qDRR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32', 'int32', 'int32', 'doublePtrPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_DRT ( long ID , const int * piRecordChannelIdsArray , const int * piTriggerSourceArray , const char * szValues , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='E7XX_DRT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qDRT ( long ID , const int * piRecordChannelIdsArray , int * piTriggerSourceArray , char * szValues , int iArraySize , int iValueBufferLength ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrcstringint32int32Thunk';fcns.name{fcnNum}='E7XX_qDRT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
% int E7XX_RTR ( long ID , int piReportTableRate ); 
fcns.thunkname{fcnNum}='int32longint32Thunk';fcns.name{fcnNum}='E7XX_RTR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qRTR ( long ID , int * piReportTableRate ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='E7XX_qRTR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_WGR ( long ID ); 
fcns.thunkname{fcnNum}='int32longThunk';fcns.name{fcnNum}='E7XX_WGR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% int E7XX_qDRL ( long ID , int * piRecordChannelIdsArray , int * piNuberOfRecordedValuesArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qDRL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_VMA ( long ID , const int * piPiezoChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_VMA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qVMA ( long ID , const int * piPiezoChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qVMA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_VMI ( long ID , const int * piPiezoChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_VMI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qVMI ( long ID , const int * piPiezoChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qVMI'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_VOL ( long ID , const int * piPiezoChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_VOL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qVOL ( long ID , const int * piPiezoChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qVOL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qTPC ( long ID , int * piNumberOfPiezoChannels ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='E7XX_qTPC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_ONL ( long ID , const int * iPiezoCannels , const int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_ONL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qONL ( long ID , const int * iPiezoCannels , long * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qONL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'longPtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qTAD ( long ID , const int * piSensorsChannelsArray , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qTAD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qTNS ( long ID , const int * piSensorsChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qTNS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qTSP ( long ID , const int * piSensorsChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qTSP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_SCN ( long ID , const int * piSensorsChannelsArray , const int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_SCN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qSCN ( long ID , const int * piSensorsChannelsArray , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qSCN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qTSC ( long ID , int * piNumberOfSensorChannels ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='E7XX_qTSC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_APG ( long ID , const int * piPIEZOWALKChannelsArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_APG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qAPG ( long ID , const int * piPIEZOWALKChannelsArray , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qAPG'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_OAC ( long ID , const int * piPIEZOWALKChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_OAC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qOAC ( long ID , const int * piPIEZOWALKChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qOAC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_OAD ( long ID , const int * piPIEZOWALKChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_OAD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qOAD ( long ID , const int * piPIEZOWALKChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qOAD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_ODC ( long ID , const int * piPIEZOWALKChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_ODC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qODC ( long ID , const int * piPIEZOWALKChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qODC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_OCD ( long ID , const int * piPIEZOWALKChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_OCD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qOCD ( long ID , const int * piPIEZOWALKChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qOCD'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_OSM ( long ID , const int * piPIEZOWALKChannelsArray , const int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_OSM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qOSM ( long ID , const int * piPIEZOWALKChannelsArray , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qOSM'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_OSMf ( long ID , const int * piPIEZOWALKChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_OSMf'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qOSMf ( long ID , const int * piPIEZOWALKChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qOSMf'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_OVL ( long ID , const int * piPIEZOWALKChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_OVL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qOVL ( long ID , const int * piPIEZOWALKChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qOVL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qOSN ( long ID , const int * piPIEZOWALKChannelsArray , int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qOSN'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_SSA ( long ID , const int * piPIEZOWALKChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_SSA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qSSA ( long ID , const int * piPIEZOWALKChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qSSA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_RNP ( long ID , const int * piPIEZOWALKChannelsArray , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_RNP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_PGS ( long ID , const int * piPIEZOWALKChannelsArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_PGS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qTAC ( long ID , int * pnNrChannels ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='E7XX_qTAC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr'};fcnNum=fcnNum+1;
% int E7XX_qTAV ( long ID , const int * piChannelsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qTAV'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_OMA ( long ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_OMA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_qOMA ( long ID , const char * szAxes , double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_qOMA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_OMR ( long ID , const char * szAxes , const double * pdValueArray ); 
fcns.thunkname{fcnNum}='int32longcstringvoidPtrThunk';fcns.name{fcnNum}='E7XX_OMR'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int E7XX_qJAS ( long ID , const int * iJoystickIDsArray , const int * iAxesIDsArray , double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qJAS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_JAX ( long ID , int iJoystickID , int iAxesID , const char * szAxesBuffer ); 
fcns.thunkname{fcnNum}='int32longint32int32cstringThunk';fcns.name{fcnNum}='E7XX_JAX'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_qJAX ( long ID , const int * iJoystickIDsArray , const int * iAxesIDsArray , int iArraySize , char * szAxesBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32cstringint32Thunk';fcns.name{fcnNum}='E7XX_qJAX'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qJBS ( long ID , const int * iJoystickIDsArray , const int * iButtonIDsArray , int * pbValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qJBS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_JDT ( long ID , const int * iJoystickIDsArray , const int * iAxisIDsArray , const int * piValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_JDT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_JLT ( long ID , int iJoystickID , int iAxisID , int iStartAdress , const double * pdValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longint32int32int32voidPtrint32Thunk';fcns.name{fcnNum}='E7XX_JLT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32', 'int32', 'int32', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qJLT ( long ID , const int * iJoystickIDsArray , const int * iAxisIDsArray , int iNumberOfTables , int iOffsetOfFirstPointInTable , int iNumberOfValues , double ** pdValueArray , char * szGcsArrayHeader , int iGcsArrayHeaderMaxSize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32int32int32voidPtrcstringint32Thunk';fcns.name{fcnNum}='E7XX_qJLT'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32', 'int32', 'int32', 'doublePtrPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_JON ( long ID , const int * iJoystickIDsArray , const int * pbValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_JON'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_qJON ( long ID , const int * iJoystickIDsArray , int * pbValueArray , int iArraySize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='E7XX_qJON'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% int E7XX_GetSupportedFunctions ( long ID , long * piCommandLevelArray , const int iiBufferSize , char * szFunctionNames , const int iMaxFunctioNamesLength ); 
fcns.thunkname{fcnNum}='int32longvoidPtrint32cstringint32Thunk';fcns.name{fcnNum}='E7XX_GetSupportedFunctions'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'longPtr', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_GetSupportedParameters ( long ID , int * piParameterIdArray , int * piCommandLevelArray , int * piMemoryLocationArray , int * piDataTypeArray , int * piNumberOfItems , const int iiBufferSize , char * szParameterName , const int iMaxParameterNameSize ); 
fcns.thunkname{fcnNum}='int32longvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrint32cstringint32Thunk';fcns.name{fcnNum}='E7XX_GetSupportedParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_GetSupportedControllers ( char * szBuffer , int iBufferSize ); 
fcns.thunkname{fcnNum}='int32cstringint32Thunk';fcns.name{fcnNum}='E7XX_GetSupportedControllers'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% int E7XX_GetAsyncBufferIndex ( long ID ); 
fcns.thunkname{fcnNum}='int32longThunk';fcns.name{fcnNum}='E7XX_GetAsyncBufferIndex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% int E7XX_GetAsyncBuffer ( long ID , double ** pdValueArray ); 
fcns.thunkname{fcnNum}='int32longvoidPtrThunk';fcns.name{fcnNum}='E7XX_GetAsyncBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'doublePtrPtr'};fcnNum=fcnNum+1;
% int E7XX_AddStage ( long ID , const char * szAxes ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='E7XX_AddStage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_RemoveStage ( long ID , const char * szStageName ); 
fcns.thunkname{fcnNum}='int32longcstringThunk';fcns.name{fcnNum}='E7XX_RemoveStage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'cstring'};fcnNum=fcnNum+1;
% int E7XX_OpenUserStagesEditDialog ( long ID ); 
fcns.thunkname{fcnNum}='int32longThunk';fcns.name{fcnNum}='E7XX_OpenUserStagesEditDialog'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% int E7XX_OpenPiStagesEditDialog ( long ID ); 
fcns.thunkname{fcnNum}='int32longThunk';fcns.name{fcnNum}='E7XX_OpenPiStagesEditDialog'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% int E7XX_DisableSingleStagesDatFiles ( long ID , int bDisable ); 
fcns.thunkname{fcnNum}='int32longint32Thunk';fcns.name{fcnNum}='E7XX_DisableSingleStagesDatFiles'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32'};fcnNum=fcnNum+1;
% int E7XX_DisableUserStagesDatFiles ( long ID , int bDisable ); 
fcns.thunkname{fcnNum}='int32longint32Thunk';fcns.name{fcnNum}='E7XX_DisableUserStagesDatFiles'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'long', 'int32'};fcnNum=fcnNum+1;
methodinfo=fcns;