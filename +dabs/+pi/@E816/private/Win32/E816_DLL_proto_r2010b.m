function [methodinfo,structs,enuminfo,ThunkLibName]=E816_DLL_proto_r2010b
%E816_DLL_PROTO_R2010B Create structures to define interfaces found in 'E816_DLL'.

%This function was generated by loadlibrary.m parser version 1.1.6.33 on Tue Nov 22 22:43:45 2011
%perl options:'E816_DLL.i -outfile=E816_DLL_proto_r2010b.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% int  _stdcall E816_InterfaceSetupDlg ( const char * szRegKeyName ); 
fcns.name{fcnNum}='E816_InterfaceSetupDlg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  _stdcall E816_ConnectRS232 ( int nPortNr , long nBaudRate ); 
fcns.name{fcnNum}='E816_ConnectRS232'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'long'};fcnNum=fcnNum+1;
% int  _stdcall E816_FindOnRS ( int * pnStartPort , int * pnStartBaud ); 
fcns.name{fcnNum}='E816_FindOnRS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_IsConnected ( int ID ); 
fcns.name{fcnNum}='E816_IsConnected'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% void  _stdcall E816_CloseConnection ( int ID ); 
fcns.name{fcnNum}='E816_CloseConnection'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  _stdcall E816_GetError ( int ID ); 
fcns.name{fcnNum}='E816_GetError'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_TranslateError ( int errNr , char * szBuffer , int maxlen ); 
fcns.name{fcnNum}='E816_TranslateError'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall E816_SetTimeout ( int ID , int timeout ); 
fcns.name{fcnNum}='E816_SetTimeout'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall E816_ConnectTCPIP ( const char * szHostname , long port ); 
fcns.name{fcnNum}='E816_ConnectTCPIP'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'long'};fcnNum=fcnNum+1;
% int  _stdcall E816_EnumerateTCPIPDevices ( char * szBuffer , long iBufferSize ); 
fcns.name{fcnNum}='E816_EnumerateTCPIPDevices'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'long'};fcnNum=fcnNum+1;
% int  _stdcall E816_ConnectTCPIPByDescription ( const char * szDescription ); 
fcns.name{fcnNum}='E816_ConnectTCPIPByDescription'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  _stdcall E816_EnumerateUSB ( char * szBuffer , long iBufferSize , const char * szFilter ); 
fcns.name{fcnNum}='E816_EnumerateUSB'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'long', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall E816_ConnectUSB ( const char * szDescription ); 
fcns.name{fcnNum}='E816_ConnectUSB'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_qIDN ( int ID , char * szBuffer , int maxlen ); 
fcns.name{fcnNum}='E816_qIDN'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_qERR ( int ID , int * pnError ); 
fcns.name{fcnNum}='E816_qERR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_qHLP ( int ID , char * szBuffer , int maxlen ); 
fcns.name{fcnNum}='E816_qHLP'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_qPOS ( int ID , const char * axes , double * pdValarray ); 
fcns.name{fcnNum}='E816_qPOS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_qONT ( int ID , const char * axes , BOOL * pbOnTarget ); 
fcns.name{fcnNum}='E816_qONT'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_MOV ( int ID , const char * axes , const double * pdValarray ); 
fcns.name{fcnNum}='E816_MOV'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_qMOV ( int ID , const char * axes , double * pdValarray ); 
fcns.name{fcnNum}='E816_qMOV'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_MVR ( int ID , const char * axes , const double * pdValarray ); 
fcns.name{fcnNum}='E816_MVR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_SVO ( int ID , const char * szAxes , const BOOL * pbValarray ); 
fcns.name{fcnNum}='E816_SVO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_qSVO ( int ID , const char * szAxes , BOOL * pbValarray ); 
fcns.name{fcnNum}='E816_qSVO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_DCO ( int ID , const char * szAxes , const BOOL * pbValarray ); 
fcns.name{fcnNum}='E816_DCO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_qDCO ( int ID , const char * szAxes , BOOL * pbValarray ); 
fcns.name{fcnNum}='E816_qDCO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_SVA ( int ID , const char * axes , const double * pdValarray ); 
fcns.name{fcnNum}='E816_SVA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_qSVA ( int ID , const char * axes , double * pdValarray ); 
fcns.name{fcnNum}='E816_qSVA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_SVR ( int ID , const char * axes , const double * pdValarray ); 
fcns.name{fcnNum}='E816_SVR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_qVOL ( int ID , const char * axes , double * pdValarray ); 
fcns.name{fcnNum}='E816_qVOL'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_qOVF ( int ID , const char * axes , BOOL * pbOverflow ); 
fcns.name{fcnNum}='E816_qOVF'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_AVG ( int ID , int nAverage ); 
fcns.name{fcnNum}='E816_AVG'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_qAVG ( int ID , int * pnAverage ); 
fcns.name{fcnNum}='E816_qAVG'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_SPA ( int ID , const char * szAxes , const int * iCmdarray , const double * dValarray ); 
fcns.name{fcnNum}='E816_SPA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_qSPA ( int ID , const char * szAxes , const int * iCmdarray , double * dValarray ); 
fcns.name{fcnNum}='E816_qSPA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_WPA ( int ID , const char * swPassword ); 
fcns.name{fcnNum}='E816_WPA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_qSAI ( int ID , char * axes , int maxlen ); 
fcns.name{fcnNum}='E816_qSAI'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_qSSN ( int ID , const char * szAxes , int * piValarray ); 
fcns.name{fcnNum}='E816_qSSN'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_qSCH ( int ID , char * pcChannelName ); 
fcns.name{fcnNum}='E816_qSCH'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_SCH ( int ID , char cChannelName ); 
fcns.name{fcnNum}='E816_SCH'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int8'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_RST ( int ID ); 
fcns.name{fcnNum}='E816_RST'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_BDR ( int ID , int nBaudRate ); 
fcns.name{fcnNum}='E816_BDR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_qBDR ( int ID , int * pnBaudRate ); 
fcns.name{fcnNum}='E816_qBDR'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_qI2C ( int ID , int * pnErrorCode , char * pcChannel ); 
fcns.name{fcnNum}='E816_qI2C'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'cstring'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_WTO ( int ID , char cAxis , int nNumber ); 
fcns.name{fcnNum}='E816_WTO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int8', 'int32'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_WTOTimer ( int ID , char cAxis , int nNumber , int timer ); 
fcns.name{fcnNum}='E816_WTOTimer'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int8', 'int32', 'int32'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_SWT ( int ID , char cAxis , int nIndex , double dValue ); 
fcns.name{fcnNum}='E816_SWT'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int8', 'int32', 'double'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_qSWT ( int ID , char cAxis , int nIndex , double * pdValue ); 
fcns.name{fcnNum}='E816_qSWT'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int8', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_GcsCommandset ( int ID , const char * szCommand ); 
fcns.name{fcnNum}='E816_GcsCommandset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_GcsGetAnswer ( int ID , char * szAnswer , int bufsize ); 
fcns.name{fcnNum}='E816_GcsGetAnswer'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_GcsGetAnswerSize ( int ID , int * iAnswerSize ); 
fcns.name{fcnNum}='E816_GcsGetAnswerSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_ConfigPStage ( int ID , char cAxis , double dPos10V , double dPos0V , BOOL bUseCurrentParams ); 
fcns.name{fcnNum}='E816_ConfigPStage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int8', 'double', 'double', 'int32'};fcnNum=fcnNum+1;
% BOOL  _stdcall E816_ConfigPZTVAmplifier ( int ID , char cAxis , unsigned char ucAmpType , BOOL bUseCurrentParams ); 
fcns.name{fcnNum}='E816_ConfigPZTVAmplifier'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int8', 'uint8', 'int32'};fcnNum=fcnNum+1;
methodinfo=fcns;